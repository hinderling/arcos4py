{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"arcos4py \u00b6 A python package to detect collective Spatio-temporal phenomena Package is currently in testing phase, i.e. additional features will be added such as additional plotting functionallity. This also means that functionallity might change in the feature. Documentation: https://bgraedel.github.io/arcos4py GitHub: https://github.com/bgraedel/arcos4py PyPI: https://pypi.org/project/arcos4py/ Free software: MIT Features \u00b6 Automated Recognition of Collective Signalling (arcos4py) is a python port of the R package ARCOS (https://github.com/dmattek/ARCOS ) to identify collective spatial events in time series data. The software identifies collective protein activation in 2- and 3D cell cultures over time. Such collective waves have been recently identified in various biological systems. They have been demonstrated to play an important role in the maintenance of epithelial homeostasis (Gagliardi et al., 2020, Takeuchi et al., 2020, Aikin et al., 2020), in the acinar morphogenesis (Ender et al., 2020), osteoblast regeneration (De Simone et al., 2021), and in the coordination of collective cell migration (Aoki et al., 2017, Hino et al., 2020). Despite its focus on cell signaling, the framework can also be applied to other spatially correlated phenomena that occur over time. Todo's \u00b6 Add additionall plotting functions such as collective event duration, noodle plots for collective id tracks, measurment histogram etc. Add additionall tests for binarization and de-biasing modules. Add example processing to documentation with images of collective events. Data Format \u00b6 Time series should be arranged in \"long format\" where each row defines the object's location, time, and optionally the measurement value. ARCOS defines an ARCOS object on which several class methods can be used to prepare the data and calculate collective events. Optionally the objects used in the ARCOS class can be used individually by importing them from arcos.tools Installation \u00b6 The arcos python package can be installed with: pip install arcos4py Credits \u00b6 Maciej Dobrzynski (https://github.com/dmattek) created the original ARCOS algorithm. This package was created with Cookiecutter and the waynerv/cookiecutter-pypackage project template.","title":"Home"},{"location":"#arcos4py","text":"A python package to detect collective Spatio-temporal phenomena Package is currently in testing phase, i.e. additional features will be added such as additional plotting functionallity. This also means that functionallity might change in the feature. Documentation: https://bgraedel.github.io/arcos4py GitHub: https://github.com/bgraedel/arcos4py PyPI: https://pypi.org/project/arcos4py/ Free software: MIT","title":"arcos4py"},{"location":"#features","text":"Automated Recognition of Collective Signalling (arcos4py) is a python port of the R package ARCOS (https://github.com/dmattek/ARCOS ) to identify collective spatial events in time series data. The software identifies collective protein activation in 2- and 3D cell cultures over time. Such collective waves have been recently identified in various biological systems. They have been demonstrated to play an important role in the maintenance of epithelial homeostasis (Gagliardi et al., 2020, Takeuchi et al., 2020, Aikin et al., 2020), in the acinar morphogenesis (Ender et al., 2020), osteoblast regeneration (De Simone et al., 2021), and in the coordination of collective cell migration (Aoki et al., 2017, Hino et al., 2020). Despite its focus on cell signaling, the framework can also be applied to other spatially correlated phenomena that occur over time.","title":"Features"},{"location":"#todos","text":"Add additionall plotting functions such as collective event duration, noodle plots for collective id tracks, measurment histogram etc. Add additionall tests for binarization and de-biasing modules. Add example processing to documentation with images of collective events.","title":"Todo's"},{"location":"#data-format","text":"Time series should be arranged in \"long format\" where each row defines the object's location, time, and optionally the measurement value. ARCOS defines an ARCOS object on which several class methods can be used to prepare the data and calculate collective events. Optionally the objects used in the ARCOS class can be used individually by importing them from arcos.tools","title":"Data Format"},{"location":"#installation","text":"The arcos python package can be installed with: pip install arcos4py","title":"Installation"},{"location":"#credits","text":"Maciej Dobrzynski (https://github.com/dmattek) created the original ARCOS algorithm. This package was created with Cookiecutter and the waynerv/cookiecutter-pypackage project template.","title":"Credits"},{"location":"api/","text":"Arcos4py top level module. This package is a python port of an R package to detect and analyse collective phenomena. arcos4py \u00b6 Main Module to track and detect collective events. Examples: >>> from arcos4py import ARCOS >>> ts = ARCOS ( data ,[ \"x\" ], 'time' , 'id' , 'meas' , 'clTrackID' ) >>> ts . interpolate_measurements () >>> ts . clip_meas ( clip_low : = 0.001 , clip_high = 0.999 ) >>> ts . bin_measurements ( smoothK : int = 3 , biasK = 51 , peakThr = 0.2 , binThr = 0.1 , polyDeg = 1 , biasMet = \"runmed\" ,) >>> events_df = ts . trackCollev ( eps = 1 , minClsz = 1 , nPrev = 1 ) ARCOS \u00b6 Detects and tracks collective events in a tracked timeseries dataset. Requires binarized measurement column, that can be generated with the bin_measurements method. Tracking makes use of the dbscan algorithm, which is applied to every frame and subsequently connects collective events between frames located within eps distance of each other. __init__ ( self , data , posCols = [ 'x' ], frame_column = 'time' , id_column = 'id' , measurement_column = 'meas' , clid_column = 'clTrackID' ) special \u00b6 Constructs class with provided arguments. Parameters: Name Type Description Default data DataFrame DataFrame, Input Data of tracked timeseries in long format containing position columns, a measurement and an object ID column. required posCols list dict, Containing positin column names (strings) inside data e.g. At least one dimension is required ['x'] frame_column str str, Indicating the frame column in input_data 'time' id_column str str, Indicating the track id/id column in input_data 'id' measurement_column str str, Indicating the measurement column in input_data 'meas' clid_column str str, Indicating the column name containing the collective event ids 'clTrackID' Source code in arcos4py/arcos4py.py def __init__ ( self , data : pd . DataFrame , posCols : list = [ \"x\" ], frame_column : str = 'time' , id_column : str = 'id' , measurement_column : str = 'meas' , clid_column : str = 'clTrackID' , ) -> None : \"\"\"Constructs class with provided arguments. Arguments: data: DataFrame, Input Data of tracked timeseries in long format containing position columns, a measurement and an object ID column. posCols: dict, Containing positin column names (strings) inside data e.g. At least one dimension is required frame_column: str, Indicating the frame column in input_data id_column: str, Indicating the track id/id column in input_data measurement_column: str, Indicating the measurement column in input_data clid_column: str, Indicating the column name containing the collective event ids \"\"\" self . data = data self . posCols = posCols self . frame_column = frame_column self . id_column = id_column self . measurement_column = measurement_column self . clid_column = clid_column self . data_binarized : pd . DataFrame = None self . tracked_events : pd . DataFrame = None self . bin_col : Union [ str , None ] = None # to check if no measurement was provided assign None self . data = self . data . sort_values ( by = [ self . frame_column , self . id_column ]) self . _check_col_dict () if self . measurement_column is not None : self . resc_col = f \" { self . measurement_column } .resc\" self . bin_col = f \" { self . measurement_column } .bin\" __repr__ ( self ) special \u00b6 Set __repr___ to return self.data. Source code in arcos4py/arcos4py.py def __repr__ ( self ) -> pd . DataFrame : \"\"\"Set __repr___ to return self.data.\"\"\" return repr ( self . data ) bin_measurements ( self , smoothK = 3 , biasK = 51 , peakThr = 0.2 , binThr = 0.1 , polyDeg = 1 , biasMet = 'runmed' ) \u00b6 Smooth, de-trend, and binarise the input data. First a short-term median filter with size smoothK is applied to remove fast noise from the time series. If the de-trending method is set to \"none\", smoothing is applied on globally rescaled time series. The subsequent de-trending can be performed with a long-term median filter with the size biasK {biasMet = \"runmed\"} or by fitting a polynomial of degree polyDeg {biasMet = \"lm\"}. After de-trending, if the global difference between min/max is greater than the threshold the signal is rescaled to the (0,1) range. The final signal is binarised using the binThr threshold Parameters: Name Type Description Default smoothK int Size of the short-term median smoothing filter. 3 biasK int Size of the long-term de-trending median filter 51 peakThr float Threshold for rescaling of the de-trended signal. 0.2 polyDeg int Sets the degree of the polynomial for lm fitting. 1 biasMet str De-trending method, one of ['runmed', 'lm', 'none']. 'runmed' Returns: Type Description DataFrame DataFrame with detrended/smoothed and binarized measurement column Source code in arcos4py/arcos4py.py def bin_measurements ( self , smoothK : int = 3 , biasK : int = 51 , peakThr : float = 0.2 , binThr : float = 0.1 , polyDeg : int = 1 , biasMet : str = \"runmed\" , ) -> pd . DataFrame : r \"\"\"Smooth, de-trend, and binarise the input data. First a short-term median filter with size smoothK is applied to remove fast noise from the time series. If the de-trending method is set to \"none\", smoothing is applied on globally rescaled time series. The subsequent de-trending can be performed with a long-term median filter with the size biasK {biasMet = \"runmed\"} or by fitting a polynomial of degree polyDeg {biasMet = \"lm\"}. After de-trending, if the global difference between min/max is greater than the threshold the signal is rescaled to the (0,1) range. The final signal is binarised using the binThr threshold Arguments: smoothK: Size of the short-term median smoothing filter. biasK: Size of the long-term de-trending median filter peakThr: Threshold for rescaling of the de-trended signal. polyDeg: Sets the degree of the polynomial for lm fitting. biasMet: De-trending method, one of ['runmed', 'lm', 'none']. Returns: DataFrame with detrended/smoothed and binarized measurement column \"\"\" self . data = binData ( self . data , smoothK , biasK , peakThr , binThr , polyDeg , biasMet , colMeas = self . measurement_column , colGroup = self . id_column , ) . run () return self . data clip_meas ( self , clip_low = 0.001 , clip_high = 0.999 ) \u00b6 Clip measurement column to upper and lower quantiles defined in clip_low and clip_high. Parameters: Name Type Description Default clip_low float Lower clipping boundry (quantile) 0.001 clip_high float Upper clipping boundry (quantile) 0.999 Returns: Type Description DataFrame Dataframe with inplace clipped measurement column Source code in arcos4py/arcos4py.py def clip_meas ( self , clip_low : float = 0.001 , clip_high : float = 0.999 ) -> pd . DataFrame : \"\"\"Clip measurement column to upper and lower quantiles defined in clip_low and clip_high. Arguments: clip_low: Lower clipping boundry (quantile) clip_high: Upper clipping boundry (quantile) Returns: Dataframe with inplace clipped measurement column \"\"\" meas_column = self . data [ self . measurement_column ] . to_numpy () meas_clipped = clipMeas ( meas_column ) . clip ( clip_low , clip_high ) self . data [ self . measurement_column ] = meas_clipped return self . data interpolate_measurements ( self ) \u00b6 Interpolates measurement columns NaN's in place. Returns: Type Description DataFrame Dataframe with interpolated measurement column Source code in arcos4py/arcos4py.py def interpolate_measurements ( self ) -> pd . DataFrame : \"\"\"Interpolates measurement columns NaN's in place. Returns: Dataframe with interpolated measurement column \"\"\" meas_column = self . data [ self . measurement_column ] . to_numpy () meas_interp = interpolation ( meas_column ) . interpolate () self . data [ self . measurement_column ] = meas_interp return self . data trackCollev ( self , eps = 1 , minClsz = 1 , nPrev = 1 ) \u00b6 Identifies and tracks collective signalling events. Requires binarized measurement column. Makes use of the dbscan algorithm, applys this to every timeframe and subsequently connects collective events between frames located within eps distance of each other. Parameters: Name Type Description Default eps float The maximum distance between two samples for one to be considered as in the neighborhood of the other. This is not a maximum bound on the distances of points within a cluster. Value also used to connect collective events across multiple frames. 1 minClsz int Minimum size for a cluster to be identified as a collective event 1 nPrev int Number of previous frames the tracking algorithm looks back to connect collective events 1 Returns: Type Description DataFrame pandas dataframe with detected collective events across time Source code in arcos4py/arcos4py.py def trackCollev ( self , eps : float = 1 , minClsz : int = 1 , nPrev : int = 1 ) -> pd . DataFrame : \"\"\"Identifies and tracks collective signalling events. Requires binarized measurement column. Makes use of the dbscan algorithm, applys this to every timeframe and subsequently connects collective events between frames located within eps distance of each other. Arguments: eps: The maximum distance between two samples for one to be considered as in the neighborhood of the other. This is not a maximum bound on the distances of points within a cluster. Value also used to connect collective events across multiple frames. minClsz: Minimum size for a cluster to be identified as a collective event nPrev: Number of previous frames the tracking algorithm looks back to connect collective events Returns: pandas dataframe with detected collective events across time \"\"\" self . data = detectCollev ( self . data , eps = eps , minClSz = minClsz , nPrev = nPrev , posCols = self . posCols , frame_column = self . frame_column , id_column = self . id_column , bin_meas_column = self . bin_col , clid_column = self . clid_column , ) . run () return self . data plotting special \u00b6 Tools for plotting collective events. plotting \u00b6 Module to plot different metrics generated by arcos4py functions. Examples: >>> from arcos4py.plotting import arcosPlots >>> plt = arcosPlots ( data , 'time' , 'meas' ) >>> plt . plot_detrended () arcosPlots \u00b6 Plot different arcos metrics such as detrended vs original data. __init__ ( self , data , frame , measurement , detrended , id ) special \u00b6 Plot different arcos metrics such as detrended vs original data. Parameters: Name Type Description Default data DataFrame Dataframe containing ARCOS data. required frame str String name of frame column in data. required measurement str String name of measurement column in data. required detrended str String name of detrended column with detrended data. required id str String name of track id column. required Source code in arcos4py/plotting/plotting.py def __init__ ( self , data : pd . DataFrame , frame : str , measurement : str , detrended : str , id : str ): \"\"\"Plot different arcos metrics such as detrended vs original data. Arguments: data: Dataframe containing ARCOS data. frame: String name of frame column in data. measurement: String name of measurement column in data. detrended: String name of detrended column with detrended data. id: String name of track id column. \"\"\" self . data = data self . measurement = measurement self . detrended = detrended self . id = id self . frame = frame plot_detrended ( self , n_samples = 25 , subplots = ( 5 , 5 ), plotsize = ( 20 , 10 )) \u00b6 Method to plot detrended vs original data. Parameters: Name Type Description Default n_samples int int, Number of tracks to plot. 25 subplots tuple Number of subplots, should be approx. one per sample. (5, 5) plotsize tuple Size of generated plot. (20, 10) Returns: Type Description Axes Matplotlib figure of detrended vs original data. Source code in arcos4py/plotting/plotting.py def plot_detrended ( self , n_samples : int = 25 , subplots : tuple = ( 5 , 5 ), plotsize : tuple = ( 20 , 10 ) ) -> matplotlib . axes . Axes : \"\"\"Method to plot detrended vs original data. Arguments: n_samples: int, Number of tracks to plot. subplots: Number of subplots, should be approx. one per sample. plotsize: Size of generated plot. Returns: Matplotlib figure of detrended vs original data. \"\"\" vals = np . random . choice ( self . data [ self . id ] . unique (), n_samples , replace = False ) self . data = self . data . set_index ( self . id ) . loc [ vals ] . reset_index () grouped = self . data . groupby ( self . id ) ncols = subplots [ 0 ] nrows = subplots [ 1 ] fig , axes = plt . subplots ( nrows = nrows , ncols = ncols , figsize = plotsize , sharey = True ) for ( key , ax ) in zip ( grouped . groups . keys (), axes . flatten ()): grouped . get_group ( key ) . plot ( x = self . frame , y = [ self . measurement , self . detrended ], ax = ax ) ax . get_legend () . remove () handles , labels = ax . get_legend_handles_labels () fig . legend ( handles , labels , loc = \"lower right\" ) plt . show () tools special \u00b6 Tools for detecting collective events. binarize_detrend \u00b6 Module containing binarization and detrending classes. Examples: >>> from arcos4py.tools import binData >>> binarizer = binData ( x = data , biasMet = \"lm\" , colMeas = \"ERK_KTR\" , colGroup = \"trackID\" , polyDeg = 1 ) >>> data_rescaled = binarizer . run () binData \u00b6 Smooth, de-trend, and binarise the input data. First a short-term median filter with size smoothK is applied to remove fast noise from the time series. If the de-trending method is set to \"none\", smoothing is applied on globally rescaled time series. The subsequent de-trending can be performed with a long-term median filter with the size biasK {biasMet = \"runmed\"} or by fitting a polynomial of degree polyDeg {biasMet = \"lm\"}. After de-trending, if the global difference between min/max is greater than the threshold the signal is rescaled to the (0,1) range. The final signal is binarised using the binThr threshold. __init__ ( self , x , smoothK = 3 , biasK = 51 , peakThr = 0.2 , binThr = 0.1 , polyDeg = 1 , biasMet = 'runmed' , colMeas = 'meas' , colGroup = 'id' ) special \u00b6 Smooth, de-trend, and binarise the input data. Parameters: Name Type Description Default x DataFrame DataFrame, The time series data for smoothing. required smoothK int int, Size of the short-term median smoothing filter. 3 biasK int int, Size of the long-term de-trending median filter. 51 peakThr float float, Threshold for rescaling of the de-trended signal. 0.2 binThr float float, Threshold for binarizing the de-trended signal. 0.1 polyDeg int int, Sets the degree of the polynomial for lm fitting. 1 biasMet str str, De-trending method, one of ['runmed', 'lm', 'none']. 'runmed' colMeas str str, Measurment column in x. 'meas' colGroup str str, Track id column in x. 'id' Source code in arcos4py/tools/binarize_detrend.py def __init__ ( self , x : pd . DataFrame , smoothK : int = 3 , biasK : int = 51 , peakThr : float = 0.2 , binThr : float = 0.1 , polyDeg : int = 1 , biasMet : str = \"runmed\" , colMeas : str = \"meas\" , colGroup : str = \"id\" , ) -> None : \"\"\"Smooth, de-trend, and binarise the input data. Arguments: x: DataFrame, The time series data for smoothing. smoothK: int, Size of the short-term median smoothing filter. biasK: int, Size of the long-term de-trending median filter. peakThr: float, Threshold for rescaling of the de-trended signal. binThr: float, Threshold for binarizing the de-trended signal. polyDeg: int, Sets the degree of the polynomial for lm fitting. biasMet: str, De-trending method, one of ['runmed', 'lm', 'none']. colMeas: str, Measurment column in x. colGroup: str, Track id column in x. \"\"\" super () . __init__ ( x , smoothK , biasK , peakThr , polyDeg , biasMet , colMeas , colGroup ) self . binThr = binThr self . col_resc = f \" { self . colMeas } .resc\" self . col_bin = f \" { self . colMeas } .bin\" run ( self ) \u00b6 Runs binarization and detrending. If the bias Method is 'none', first it rescales the data to between [0,1], then local smoothing is applied to the measurent by groups, followed by binarization. If biasMeth is one of ['lm', 'runmed'], first the data is detrended locally with a median filter and then detrended globally, for 'lm' with a linear model and for 'runmed' with a median filter. Followed by binarization of the data. Returns: Type Description DataFrame Dataframe containing Binarized data, rescaled data and the original columns Source code in arcos4py/tools/binarize_detrend.py def run ( self ) -> pd . DataFrame : \"\"\"Runs binarization and detrending. If the bias Method is 'none', first it rescales the data to between [0,1], then local smoothing is applied to the measurent by groups, followed by binarization. If biasMeth is one of ['lm', 'runmed'], first the data is detrended locally with a median filter and then detrended globally, for 'lm' with a linear model and for 'runmed' with a median filter. Followed by binarization of the data. Returns: Dataframe containing Binarized data, rescaled data and the original columns \"\"\" if self . biasMet == \"none\" : rescaled_data = self . _rescale_data ( self . x ) detrended_data = self . detrend ( rescaled_data , self . colGroup , self . col_resc ) binarized_data = self . _bin_data ( detrended_data ) else : detrended_data = self . detrend ( self . x , self . colGroup , self . colMeas ) binarized_data = self . _bin_data ( detrended_data ) return binarized_data detrender \u00b6 Smooth and de-trend input data. First a short-term median filter with size smoothK is applied to remove fast noise from the time series. The subsequent de-trending can be performed with a long-term median filter with the size biasK {biasMet = \"runmed\"} or by fitting a polynomial of degree polyDeg {biasMet = \"lm\"}. __init__ ( self , x , smoothK = 3 , biasK = 51 , peakThr = 0.2 , polyDeg = 1 , biasMet = 'runmed' , colMeas = 'meas' , colGroup = 'id' ) special \u00b6 Smooth and de-trend input data. Parameters: Name Type Description Default x DataFrame DataFrame, Time series data for smoothing. required smoothK int int, Representing size of the short-term median smoothing filter. 3 biasK int int, Representing size of the long-term de-trending median filter. 51 peakThr float float, Threshold for rescaling of the de-trended signal. 0.2 polyDeg int int, Sets the degree of the polynomial for lm fitting. 1 biasMet str str, Indicating de-trending method, one of ['runmed', 'lm', 'none']. 'runmed' colMeas str str, Name of measurment column in x. 'meas' colGroup str str, Name of id column in x. 'id' Source code in arcos4py/tools/binarize_detrend.py def __init__ ( self , x : pd . DataFrame , smoothK : int = 3 , biasK : int = 51 , peakThr : float = 0.2 , polyDeg : int = 1 , biasMet : str = \"runmed\" , colMeas : str = \"meas\" , colGroup : str = \"id\" , ) -> None : \"\"\"Smooth and de-trend input data. Arguments: x: DataFrame, Time series data for smoothing. smoothK: int, Representing size of the short-term median smoothing filter. biasK: int, Representing size of the long-term de-trending median filter. peakThr: float, Threshold for rescaling of the de-trended signal. polyDeg: int, Sets the degree of the polynomial for lm fitting. biasMet: str, Indicating de-trending method, one of ['runmed', 'lm', 'none']. colMeas: str, Name of measurment column in x. colGroup: str, Name of id column in x. \"\"\" # check if biasmethod contains one of these three types biasMet_types = [ \"runmed\" , \"lm\" , \"none\" ] if biasMet not in biasMet_types : raise ValueError ( f \"Invalid bias method. Expected one of: { biasMet_types } \" ) self . x = x self . smoothK = smoothK self . biasK = biasK self . peakThr = peakThr self . polyDeg = polyDeg self . biasMet = biasMet self . colMeas = colMeas self . colGroup = colGroup detrend ( self , data , group_col , resc_col ) \u00b6 Run detrinding on input data. Method applies detrending to each group defined in group_col and outputs it into the resc_column. Returns: Type Description DataFrame Dataframe containing rescaled column. Source code in arcos4py/tools/binarize_detrend.py def detrend ( self , data : pd . DataFrame , group_col : str , resc_col ) -> pd . DataFrame : \"\"\"Run detrinding on input data. Method applies detrending to each group defined in group_col and outputs it into the resc_column. Returns: Dataframe containing rescaled column. \"\"\" data_gp = data . groupby ([ group_col ]) data = data_gp . apply ( lambda y : self . _run_detrend ( y , resc_col )) return data cleandata \u00b6 Module containing clipping and interplation classes. Examples: >>> # Interpolation >>> from arcos4py.tools import interpolation >>> a = interpolation ( data ) >>> data_interp = a . interpolate () >>> # clipping >>> from arcos4py.tools import clipMeas >>> a = clipMeas ( data ) >>> data_clipped = a . clip ( 0.001 , 0.999 ) clipMeas \u00b6 Clip input array. __init__ ( self , data ) special \u00b6 Clips array to quantilles. Parameters: Name Type Description Default data ndarray np.ndarray, To be clipped. required Source code in arcos4py/tools/cleandata.py def __init__ ( self , data : np . ndarray ) -> None : \"\"\"Clips array to quantilles. Arguments: data: np.ndarray, To be clipped. \"\"\" self . data = data clip ( self , clip_low = 0.001 , clip_high = 0.999 ) \u00b6 Clip input array to upper and lower quantilles defined in clip_low and clip_high. Parameters: Name Type Description Default clip_low float float, Lower clipping boundry (quantille). 0.001 clip_high float float, Upper clipping boundry (quantille). 0.999 Returns: Type Description ndarray Clipped array of input data. Source code in arcos4py/tools/cleandata.py def clip ( self , clip_low : float = 0.001 , clip_high : float = 0.999 ) -> np . ndarray : \"\"\"Clip input array to upper and lower quantilles defined in clip_low and clip_high. Arguments: clip_low: float, Lower clipping boundry (quantille). clip_high: float, Upper clipping boundry (quantille). Returns: Clipped array of input data. \"\"\" low , high = self . _calculate_percentile ( self . data , clip_low , clip_high ) out = self . data . clip ( low , high ) return out interpolation \u00b6 Interpolate nan values in a numpy array. __init__ ( self , data ) special \u00b6 Interpolate nan values in a numpy array. Parameters: Name Type Description Default data ndarray np.ndarray, Where NaN should be replaced with interpolated values. required Source code in arcos4py/tools/cleandata.py def __init__ ( self , data : np . ndarray ): \"\"\"Interpolate nan values in a numpy array. Arguments: data: np.ndarray, Where NaN should be replaced with interpolated values. \"\"\" self . data = data interpolate ( self ) \u00b6 Interpolate nan and missing values. Returns: Type Description ndarray Interpolated input data. Source code in arcos4py/tools/cleandata.py def interpolate ( self ) -> np . ndarray : \"\"\"Interpolate nan and missing values. Returns: Interpolated input data. \"\"\" nans , x = self . _nan_helper ( self . data ) self . data [ nans ] = np . interp ( x ( nans ), x ( ~ nans ), self . data [ ~ nans ]) return self . data detect_events \u00b6 Module to track and detect collective events. Examples: >>> from arcos4py.tools import detectCollev >>> ts = detectCollev ( data ) >>> events_df = ts . run () detectCollev \u00b6 Identifies and tracks collective signalling events. Requires binarized measurement column. Makes use of the dbscan algorithm, applys this to every timeframe and subsequently connects collective events between frames located within eps distance of each other. __init__ ( self , input_data , eps = 1 , minClSz = 1 , nPrev = 1 , posCols = [ 'x' ], frame_column = 'time' , id_column = 'id' , bin_meas_column = 'meas' , clid_column = 'clTrackID' ) special \u00b6 Constructs class with input parameters. Parameters: Name Type Description Default input_data DataFrame DataFrame, Input data to be processed. Must contain a binarized measurement column. required eps float float, The maximum distance between two samples for one to be considered as in the neighborhood of the other. This is not a maximum bound on the distances of points within a cluster. Value also used to connect collective events across multiple frames. 1 minClSz int int, Minimum size for a cluster to be identified as a collective event. 1 nPrev int int, Number of previous frames the tracking algorithm looks back to connect collective events. 1 posCols list list, List of position columns contained in the data. Must at least contain one ['x'] frame_column str str, String indicating the frame column in input_data 'time' id_column str str, String indicating the track id/id column in input_data 'id' bin_meas_column Optional[str] str, String indicating the bin_meas_column in input_data or None. 'meas' clid_column str str, String indicating the column name containing the collective event id's. 'clTrackID' Source code in arcos4py/tools/detect_events.py def __init__ ( self , input_data : pd . DataFrame , eps : float = 1 , minClSz : int = 1 , nPrev : int = 1 , posCols : list = [ \"x\" ], frame_column : str = 'time' , id_column : str = 'id' , bin_meas_column : Union [ str , None ] = 'meas' , clid_column : str = 'clTrackID' , ) -> None : \"\"\"Constructs class with input parameters. Arguments: input_data: DataFrame, Input data to be processed. Must contain a binarized measurement column. eps: float, The maximum distance between two samples for one to be considered as in the neighborhood of the other. This is not a maximum bound on the distances of points within a cluster. Value also used to connect collective events across multiple frames. minClSz: int, Minimum size for a cluster to be identified as a collective event. nPrev: int, Number of previous frames the tracking algorithm looks back to connect collective events. posCols: list, List of position columns contained in the data. Must at least contain one frame_column: str, String indicating the frame column in input_data id_column: str, String indicating the track id/id column in input_data bin_meas_column: str, String indicating the bin_meas_column in input_data or None. clid_column: str, String indicating the column name containing the collective event id's. \"\"\" # assign some variables passed in as arguments to the object self . input_data = input_data self . eps = eps self . minClSz = minClSz self . nPrev = nPrev self . frame_column = frame_column self . id_column = id_column self . bin_meas_column = bin_meas_column self . clid_column = clid_column self . posCols = posCols self . columns_input = self . input_data . columns self . clidFrame = f ' { clid_column } .frame' self . pos_cols_inputdata = [ col for col in self . posCols if col in self . columns_input ] # run input checks self . _run_input_checks () run ( self ) \u00b6 Method to execute the different steps necessary for tracking. Selectes columns. filters data on binary column > 1. Applies dbscan algorithm to every frame. Makes cluster ids unique across frames. Tracks collective events i.e. links cluster ids across frames. Creates final DataFrame. Returns: Type Description DataFrame Dataframe with tracked collective events is returned. Source code in arcos4py/tools/detect_events.py def run ( self ) -> pd . DataFrame : \"\"\"Method to execute the different steps necessary for tracking. 1. Selectes columns. 2. filters data on binary column > 1. 3. Applies dbscan algorithm to every frame. 4. Makes cluster ids unique across frames. 5. Tracks collective events i.e. links cluster ids across frames. 6. Creates final DataFrame. Returns: Dataframe with tracked collective events is returned. \"\"\" filtered_cols = self . _select_necessary_columns ( self . input_data , self . frame_column , self . id_column , self . pos_cols_inputdata , self . bin_meas_column , ) active_data = self . _filter_active ( filtered_cols , self . bin_meas_column ) db_data = self . _run_dbscan ( data = active_data , frame = self . frame_column , clid_frame = self . clidFrame , ) db_data = self . _make_db_id_unique ( db_data , frame = self . frame_column , clid_frame = self . clidFrame , clid = self . clid_column , ) tracked_events = self . _link_clusters_between_frames ( db_data , self . frame_column , self . clid_column ) return_columns = self . _get_export_columns () tracked_events = tracked_events [ return_columns ] if self . clid_column in self . input_data . columns : df_to_merge = self . input_data . drop ( columns = [ self . clid_column ]) else : df_to_merge = self . input_data tracked_events = tracked_events . merge ( df_to_merge , how = \"left\" ) return tracked_events filter_events \u00b6 Module to filter collective events. Examples: >>> from arcos4py.tools import filterCollev >>> f = filterCollev ( data , 'time' , 'collid' ) >>> df = f . filter ( coll_duration : int = 9 , coll_total_size : int = 10 ) filterCollev \u00b6 Select Collective events that last longer than coll_duration and have a larger total size than coll_total_size. __init__ ( self , data , frame_column = 'time' , collid_column = 'collid' ) special \u00b6 Constructs filterCollev class with Parameters. Parameters: Name Type Description Default data DataFrame DataFrame, With detected collective events. required frame_column str str, Indicating the frame column in data. 'time' collid_column str str, Indicating the collective event id column in data. 'collid' Source code in arcos4py/tools/filter_events.py def __init__ ( self , data : pd . DataFrame , frame_column : str = \"time\" , collid_column : str = \"collid\" , ): \"\"\"Constructs filterCollev class with Parameters. Arguments: data: DataFrame, With detected collective events. frame_column: str, Indicating the frame column in data. collid_column: str, Indicating the collective event id column in data. \"\"\" self . data = data self . frame_column = frame_column self . collid_column = collid_column filter ( self , coll_duration = 9 , coll_total_size = 10 ) \u00b6 Filter collective events. Method to filter collective events according to the parameters specified in the object instance. Parameters: Name Type Description Default coll_duration int int, Minimal duration of collective events to be selected. 9 coll_total_size int int, Minimal total size of collective events to be selected. 10 Returns: Type Description DataFrame Returns pandas dataframe containing filtered collective events Source code in arcos4py/tools/filter_events.py def filter ( self , coll_duration : int = 9 , coll_total_size : int = 10 ) -> pd . DataFrame : \"\"\"Filter collective events. Method to filter collective events according to the parameters specified in the object instance. Arguments: coll_duration: int, Minimal duration of collective events to be selected. coll_total_size: int, Minimal total size of collective events to be selected. Returns: Returns pandas dataframe containing filtered collective events \"\"\" colev_duration = calcCollevStats () . calculate ( self . data , self . frame_column , self . collid_column ) filtered_df = self . _filter_collev ( self . data , colev_duration , self . collid_column , coll_duration , coll_total_size , ) return filtered_df stats \u00b6 Module containing tools to calculate statistics of collective events. Examples: >>> from arcos4py.tools import calcCollevStats >>> test = calcCollevStats () >>> out = test () . run ( data = data , frame_column = \"frame\" , collid_column = \"collid\" ) calcCollevStats \u00b6 Class to calculate statistics of collective events. __init__ ( self ) special \u00b6 Class to calculate statistics of collective events. Source code in arcos4py/tools/stats.py def __init__ ( self ) -> None : \"\"\"Class to calculate statistics of collective events.\"\"\" pass calculate ( self , data , frame_column , collid_column ) \u00b6 Calculate statistics of collective events. Parameters: Name Type Description Default data DataFrame DataFrame, Containing a collective events. required frame_column str str, String indicating the frame column in data. required collid_column str str, String indicating the collective event id column in data. required Returns: Type Description DataFrame Dataframe containing collective events stats. Source code in arcos4py/tools/stats.py def calculate ( self , data : pd . DataFrame , frame_column : str , collid_column : str ) -> pd . DataFrame : \"\"\"Calculate statistics of collective events. Arguments: data: DataFrame, Containing a collective events. frame_column: str, String indicating the frame column in data. collid_column: str, String indicating the collective event id column in data. Returns: Dataframe containing collective events stats. \"\"\" colev_stats = self . _get_collev_duration ( data , frame_column , collid_column ) return colev_stats","title":"Modules"},{"location":"api/#arcos4py.arcos4py","text":"Main Module to track and detect collective events. Examples: >>> from arcos4py import ARCOS >>> ts = ARCOS ( data ,[ \"x\" ], 'time' , 'id' , 'meas' , 'clTrackID' ) >>> ts . interpolate_measurements () >>> ts . clip_meas ( clip_low : = 0.001 , clip_high = 0.999 ) >>> ts . bin_measurements ( smoothK : int = 3 , biasK = 51 , peakThr = 0.2 , binThr = 0.1 , polyDeg = 1 , biasMet = \"runmed\" ,) >>> events_df = ts . trackCollev ( eps = 1 , minClsz = 1 , nPrev = 1 )","title":"arcos4py"},{"location":"api/#arcos4py.arcos4py.ARCOS","text":"Detects and tracks collective events in a tracked timeseries dataset. Requires binarized measurement column, that can be generated with the bin_measurements method. Tracking makes use of the dbscan algorithm, which is applied to every frame and subsequently connects collective events between frames located within eps distance of each other.","title":"ARCOS"},{"location":"api/#arcos4py.arcos4py.ARCOS.__init__","text":"Constructs class with provided arguments. Parameters: Name Type Description Default data DataFrame DataFrame, Input Data of tracked timeseries in long format containing position columns, a measurement and an object ID column. required posCols list dict, Containing positin column names (strings) inside data e.g. At least one dimension is required ['x'] frame_column str str, Indicating the frame column in input_data 'time' id_column str str, Indicating the track id/id column in input_data 'id' measurement_column str str, Indicating the measurement column in input_data 'meas' clid_column str str, Indicating the column name containing the collective event ids 'clTrackID' Source code in arcos4py/arcos4py.py def __init__ ( self , data : pd . DataFrame , posCols : list = [ \"x\" ], frame_column : str = 'time' , id_column : str = 'id' , measurement_column : str = 'meas' , clid_column : str = 'clTrackID' , ) -> None : \"\"\"Constructs class with provided arguments. Arguments: data: DataFrame, Input Data of tracked timeseries in long format containing position columns, a measurement and an object ID column. posCols: dict, Containing positin column names (strings) inside data e.g. At least one dimension is required frame_column: str, Indicating the frame column in input_data id_column: str, Indicating the track id/id column in input_data measurement_column: str, Indicating the measurement column in input_data clid_column: str, Indicating the column name containing the collective event ids \"\"\" self . data = data self . posCols = posCols self . frame_column = frame_column self . id_column = id_column self . measurement_column = measurement_column self . clid_column = clid_column self . data_binarized : pd . DataFrame = None self . tracked_events : pd . DataFrame = None self . bin_col : Union [ str , None ] = None # to check if no measurement was provided assign None self . data = self . data . sort_values ( by = [ self . frame_column , self . id_column ]) self . _check_col_dict () if self . measurement_column is not None : self . resc_col = f \" { self . measurement_column } .resc\" self . bin_col = f \" { self . measurement_column } .bin\"","title":"__init__()"},{"location":"api/#arcos4py.arcos4py.ARCOS.__repr__","text":"Set __repr___ to return self.data. Source code in arcos4py/arcos4py.py def __repr__ ( self ) -> pd . DataFrame : \"\"\"Set __repr___ to return self.data.\"\"\" return repr ( self . data )","title":"__repr__()"},{"location":"api/#arcos4py.arcos4py.ARCOS.bin_measurements","text":"Smooth, de-trend, and binarise the input data. First a short-term median filter with size smoothK is applied to remove fast noise from the time series. If the de-trending method is set to \"none\", smoothing is applied on globally rescaled time series. The subsequent de-trending can be performed with a long-term median filter with the size biasK {biasMet = \"runmed\"} or by fitting a polynomial of degree polyDeg {biasMet = \"lm\"}. After de-trending, if the global difference between min/max is greater than the threshold the signal is rescaled to the (0,1) range. The final signal is binarised using the binThr threshold Parameters: Name Type Description Default smoothK int Size of the short-term median smoothing filter. 3 biasK int Size of the long-term de-trending median filter 51 peakThr float Threshold for rescaling of the de-trended signal. 0.2 polyDeg int Sets the degree of the polynomial for lm fitting. 1 biasMet str De-trending method, one of ['runmed', 'lm', 'none']. 'runmed' Returns: Type Description DataFrame DataFrame with detrended/smoothed and binarized measurement column Source code in arcos4py/arcos4py.py def bin_measurements ( self , smoothK : int = 3 , biasK : int = 51 , peakThr : float = 0.2 , binThr : float = 0.1 , polyDeg : int = 1 , biasMet : str = \"runmed\" , ) -> pd . DataFrame : r \"\"\"Smooth, de-trend, and binarise the input data. First a short-term median filter with size smoothK is applied to remove fast noise from the time series. If the de-trending method is set to \"none\", smoothing is applied on globally rescaled time series. The subsequent de-trending can be performed with a long-term median filter with the size biasK {biasMet = \"runmed\"} or by fitting a polynomial of degree polyDeg {biasMet = \"lm\"}. After de-trending, if the global difference between min/max is greater than the threshold the signal is rescaled to the (0,1) range. The final signal is binarised using the binThr threshold Arguments: smoothK: Size of the short-term median smoothing filter. biasK: Size of the long-term de-trending median filter peakThr: Threshold for rescaling of the de-trended signal. polyDeg: Sets the degree of the polynomial for lm fitting. biasMet: De-trending method, one of ['runmed', 'lm', 'none']. Returns: DataFrame with detrended/smoothed and binarized measurement column \"\"\" self . data = binData ( self . data , smoothK , biasK , peakThr , binThr , polyDeg , biasMet , colMeas = self . measurement_column , colGroup = self . id_column , ) . run () return self . data","title":"bin_measurements()"},{"location":"api/#arcos4py.arcos4py.ARCOS.clip_meas","text":"Clip measurement column to upper and lower quantiles defined in clip_low and clip_high. Parameters: Name Type Description Default clip_low float Lower clipping boundry (quantile) 0.001 clip_high float Upper clipping boundry (quantile) 0.999 Returns: Type Description DataFrame Dataframe with inplace clipped measurement column Source code in arcos4py/arcos4py.py def clip_meas ( self , clip_low : float = 0.001 , clip_high : float = 0.999 ) -> pd . DataFrame : \"\"\"Clip measurement column to upper and lower quantiles defined in clip_low and clip_high. Arguments: clip_low: Lower clipping boundry (quantile) clip_high: Upper clipping boundry (quantile) Returns: Dataframe with inplace clipped measurement column \"\"\" meas_column = self . data [ self . measurement_column ] . to_numpy () meas_clipped = clipMeas ( meas_column ) . clip ( clip_low , clip_high ) self . data [ self . measurement_column ] = meas_clipped return self . data","title":"clip_meas()"},{"location":"api/#arcos4py.arcos4py.ARCOS.interpolate_measurements","text":"Interpolates measurement columns NaN's in place. Returns: Type Description DataFrame Dataframe with interpolated measurement column Source code in arcos4py/arcos4py.py def interpolate_measurements ( self ) -> pd . DataFrame : \"\"\"Interpolates measurement columns NaN's in place. Returns: Dataframe with interpolated measurement column \"\"\" meas_column = self . data [ self . measurement_column ] . to_numpy () meas_interp = interpolation ( meas_column ) . interpolate () self . data [ self . measurement_column ] = meas_interp return self . data","title":"interpolate_measurements()"},{"location":"api/#arcos4py.arcos4py.ARCOS.trackCollev","text":"Identifies and tracks collective signalling events. Requires binarized measurement column. Makes use of the dbscan algorithm, applys this to every timeframe and subsequently connects collective events between frames located within eps distance of each other. Parameters: Name Type Description Default eps float The maximum distance between two samples for one to be considered as in the neighborhood of the other. This is not a maximum bound on the distances of points within a cluster. Value also used to connect collective events across multiple frames. 1 minClsz int Minimum size for a cluster to be identified as a collective event 1 nPrev int Number of previous frames the tracking algorithm looks back to connect collective events 1 Returns: Type Description DataFrame pandas dataframe with detected collective events across time Source code in arcos4py/arcos4py.py def trackCollev ( self , eps : float = 1 , minClsz : int = 1 , nPrev : int = 1 ) -> pd . DataFrame : \"\"\"Identifies and tracks collective signalling events. Requires binarized measurement column. Makes use of the dbscan algorithm, applys this to every timeframe and subsequently connects collective events between frames located within eps distance of each other. Arguments: eps: The maximum distance between two samples for one to be considered as in the neighborhood of the other. This is not a maximum bound on the distances of points within a cluster. Value also used to connect collective events across multiple frames. minClsz: Minimum size for a cluster to be identified as a collective event nPrev: Number of previous frames the tracking algorithm looks back to connect collective events Returns: pandas dataframe with detected collective events across time \"\"\" self . data = detectCollev ( self . data , eps = eps , minClSz = minClsz , nPrev = nPrev , posCols = self . posCols , frame_column = self . frame_column , id_column = self . id_column , bin_meas_column = self . bin_col , clid_column = self . clid_column , ) . run () return self . data","title":"trackCollev()"},{"location":"api/#arcos4py.plotting","text":"Tools for plotting collective events.","title":"plotting"},{"location":"api/#arcos4py.plotting.plotting","text":"Module to plot different metrics generated by arcos4py functions. Examples: >>> from arcos4py.plotting import arcosPlots >>> plt = arcosPlots ( data , 'time' , 'meas' ) >>> plt . plot_detrended ()","title":"plotting"},{"location":"api/#arcos4py.plotting.plotting.arcosPlots","text":"Plot different arcos metrics such as detrended vs original data.","title":"arcosPlots"},{"location":"api/#arcos4py.plotting.plotting.arcosPlots.__init__","text":"Plot different arcos metrics such as detrended vs original data. Parameters: Name Type Description Default data DataFrame Dataframe containing ARCOS data. required frame str String name of frame column in data. required measurement str String name of measurement column in data. required detrended str String name of detrended column with detrended data. required id str String name of track id column. required Source code in arcos4py/plotting/plotting.py def __init__ ( self , data : pd . DataFrame , frame : str , measurement : str , detrended : str , id : str ): \"\"\"Plot different arcos metrics such as detrended vs original data. Arguments: data: Dataframe containing ARCOS data. frame: String name of frame column in data. measurement: String name of measurement column in data. detrended: String name of detrended column with detrended data. id: String name of track id column. \"\"\" self . data = data self . measurement = measurement self . detrended = detrended self . id = id self . frame = frame","title":"__init__()"},{"location":"api/#arcos4py.plotting.plotting.arcosPlots.plot_detrended","text":"Method to plot detrended vs original data. Parameters: Name Type Description Default n_samples int int, Number of tracks to plot. 25 subplots tuple Number of subplots, should be approx. one per sample. (5, 5) plotsize tuple Size of generated plot. (20, 10) Returns: Type Description Axes Matplotlib figure of detrended vs original data. Source code in arcos4py/plotting/plotting.py def plot_detrended ( self , n_samples : int = 25 , subplots : tuple = ( 5 , 5 ), plotsize : tuple = ( 20 , 10 ) ) -> matplotlib . axes . Axes : \"\"\"Method to plot detrended vs original data. Arguments: n_samples: int, Number of tracks to plot. subplots: Number of subplots, should be approx. one per sample. plotsize: Size of generated plot. Returns: Matplotlib figure of detrended vs original data. \"\"\" vals = np . random . choice ( self . data [ self . id ] . unique (), n_samples , replace = False ) self . data = self . data . set_index ( self . id ) . loc [ vals ] . reset_index () grouped = self . data . groupby ( self . id ) ncols = subplots [ 0 ] nrows = subplots [ 1 ] fig , axes = plt . subplots ( nrows = nrows , ncols = ncols , figsize = plotsize , sharey = True ) for ( key , ax ) in zip ( grouped . groups . keys (), axes . flatten ()): grouped . get_group ( key ) . plot ( x = self . frame , y = [ self . measurement , self . detrended ], ax = ax ) ax . get_legend () . remove () handles , labels = ax . get_legend_handles_labels () fig . legend ( handles , labels , loc = \"lower right\" ) plt . show ()","title":"plot_detrended()"},{"location":"api/#arcos4py.tools","text":"Tools for detecting collective events.","title":"tools"},{"location":"api/#arcos4py.tools.binarize_detrend","text":"Module containing binarization and detrending classes. Examples: >>> from arcos4py.tools import binData >>> binarizer = binData ( x = data , biasMet = \"lm\" , colMeas = \"ERK_KTR\" , colGroup = \"trackID\" , polyDeg = 1 ) >>> data_rescaled = binarizer . run ()","title":"binarize_detrend"},{"location":"api/#arcos4py.tools.binarize_detrend.binData","text":"Smooth, de-trend, and binarise the input data. First a short-term median filter with size smoothK is applied to remove fast noise from the time series. If the de-trending method is set to \"none\", smoothing is applied on globally rescaled time series. The subsequent de-trending can be performed with a long-term median filter with the size biasK {biasMet = \"runmed\"} or by fitting a polynomial of degree polyDeg {biasMet = \"lm\"}. After de-trending, if the global difference between min/max is greater than the threshold the signal is rescaled to the (0,1) range. The final signal is binarised using the binThr threshold.","title":"binData"},{"location":"api/#arcos4py.tools.binarize_detrend.binData.__init__","text":"Smooth, de-trend, and binarise the input data. Parameters: Name Type Description Default x DataFrame DataFrame, The time series data for smoothing. required smoothK int int, Size of the short-term median smoothing filter. 3 biasK int int, Size of the long-term de-trending median filter. 51 peakThr float float, Threshold for rescaling of the de-trended signal. 0.2 binThr float float, Threshold for binarizing the de-trended signal. 0.1 polyDeg int int, Sets the degree of the polynomial for lm fitting. 1 biasMet str str, De-trending method, one of ['runmed', 'lm', 'none']. 'runmed' colMeas str str, Measurment column in x. 'meas' colGroup str str, Track id column in x. 'id' Source code in arcos4py/tools/binarize_detrend.py def __init__ ( self , x : pd . DataFrame , smoothK : int = 3 , biasK : int = 51 , peakThr : float = 0.2 , binThr : float = 0.1 , polyDeg : int = 1 , biasMet : str = \"runmed\" , colMeas : str = \"meas\" , colGroup : str = \"id\" , ) -> None : \"\"\"Smooth, de-trend, and binarise the input data. Arguments: x: DataFrame, The time series data for smoothing. smoothK: int, Size of the short-term median smoothing filter. biasK: int, Size of the long-term de-trending median filter. peakThr: float, Threshold for rescaling of the de-trended signal. binThr: float, Threshold for binarizing the de-trended signal. polyDeg: int, Sets the degree of the polynomial for lm fitting. biasMet: str, De-trending method, one of ['runmed', 'lm', 'none']. colMeas: str, Measurment column in x. colGroup: str, Track id column in x. \"\"\" super () . __init__ ( x , smoothK , biasK , peakThr , polyDeg , biasMet , colMeas , colGroup ) self . binThr = binThr self . col_resc = f \" { self . colMeas } .resc\" self . col_bin = f \" { self . colMeas } .bin\"","title":"__init__()"},{"location":"api/#arcos4py.tools.binarize_detrend.binData.run","text":"Runs binarization and detrending. If the bias Method is 'none', first it rescales the data to between [0,1], then local smoothing is applied to the measurent by groups, followed by binarization. If biasMeth is one of ['lm', 'runmed'], first the data is detrended locally with a median filter and then detrended globally, for 'lm' with a linear model and for 'runmed' with a median filter. Followed by binarization of the data. Returns: Type Description DataFrame Dataframe containing Binarized data, rescaled data and the original columns Source code in arcos4py/tools/binarize_detrend.py def run ( self ) -> pd . DataFrame : \"\"\"Runs binarization and detrending. If the bias Method is 'none', first it rescales the data to between [0,1], then local smoothing is applied to the measurent by groups, followed by binarization. If biasMeth is one of ['lm', 'runmed'], first the data is detrended locally with a median filter and then detrended globally, for 'lm' with a linear model and for 'runmed' with a median filter. Followed by binarization of the data. Returns: Dataframe containing Binarized data, rescaled data and the original columns \"\"\" if self . biasMet == \"none\" : rescaled_data = self . _rescale_data ( self . x ) detrended_data = self . detrend ( rescaled_data , self . colGroup , self . col_resc ) binarized_data = self . _bin_data ( detrended_data ) else : detrended_data = self . detrend ( self . x , self . colGroup , self . colMeas ) binarized_data = self . _bin_data ( detrended_data ) return binarized_data","title":"run()"},{"location":"api/#arcos4py.tools.binarize_detrend.detrender","text":"Smooth and de-trend input data. First a short-term median filter with size smoothK is applied to remove fast noise from the time series. The subsequent de-trending can be performed with a long-term median filter with the size biasK {biasMet = \"runmed\"} or by fitting a polynomial of degree polyDeg {biasMet = \"lm\"}.","title":"detrender"},{"location":"api/#arcos4py.tools.binarize_detrend.detrender.__init__","text":"Smooth and de-trend input data. Parameters: Name Type Description Default x DataFrame DataFrame, Time series data for smoothing. required smoothK int int, Representing size of the short-term median smoothing filter. 3 biasK int int, Representing size of the long-term de-trending median filter. 51 peakThr float float, Threshold for rescaling of the de-trended signal. 0.2 polyDeg int int, Sets the degree of the polynomial for lm fitting. 1 biasMet str str, Indicating de-trending method, one of ['runmed', 'lm', 'none']. 'runmed' colMeas str str, Name of measurment column in x. 'meas' colGroup str str, Name of id column in x. 'id' Source code in arcos4py/tools/binarize_detrend.py def __init__ ( self , x : pd . DataFrame , smoothK : int = 3 , biasK : int = 51 , peakThr : float = 0.2 , polyDeg : int = 1 , biasMet : str = \"runmed\" , colMeas : str = \"meas\" , colGroup : str = \"id\" , ) -> None : \"\"\"Smooth and de-trend input data. Arguments: x: DataFrame, Time series data for smoothing. smoothK: int, Representing size of the short-term median smoothing filter. biasK: int, Representing size of the long-term de-trending median filter. peakThr: float, Threshold for rescaling of the de-trended signal. polyDeg: int, Sets the degree of the polynomial for lm fitting. biasMet: str, Indicating de-trending method, one of ['runmed', 'lm', 'none']. colMeas: str, Name of measurment column in x. colGroup: str, Name of id column in x. \"\"\" # check if biasmethod contains one of these three types biasMet_types = [ \"runmed\" , \"lm\" , \"none\" ] if biasMet not in biasMet_types : raise ValueError ( f \"Invalid bias method. Expected one of: { biasMet_types } \" ) self . x = x self . smoothK = smoothK self . biasK = biasK self . peakThr = peakThr self . polyDeg = polyDeg self . biasMet = biasMet self . colMeas = colMeas self . colGroup = colGroup","title":"__init__()"},{"location":"api/#arcos4py.tools.binarize_detrend.detrender.detrend","text":"Run detrinding on input data. Method applies detrending to each group defined in group_col and outputs it into the resc_column. Returns: Type Description DataFrame Dataframe containing rescaled column. Source code in arcos4py/tools/binarize_detrend.py def detrend ( self , data : pd . DataFrame , group_col : str , resc_col ) -> pd . DataFrame : \"\"\"Run detrinding on input data. Method applies detrending to each group defined in group_col and outputs it into the resc_column. Returns: Dataframe containing rescaled column. \"\"\" data_gp = data . groupby ([ group_col ]) data = data_gp . apply ( lambda y : self . _run_detrend ( y , resc_col )) return data","title":"detrend()"},{"location":"api/#arcos4py.tools.cleandata","text":"Module containing clipping and interplation classes. Examples: >>> # Interpolation >>> from arcos4py.tools import interpolation >>> a = interpolation ( data ) >>> data_interp = a . interpolate () >>> # clipping >>> from arcos4py.tools import clipMeas >>> a = clipMeas ( data ) >>> data_clipped = a . clip ( 0.001 , 0.999 )","title":"cleandata"},{"location":"api/#arcos4py.tools.cleandata.clipMeas","text":"Clip input array.","title":"clipMeas"},{"location":"api/#arcos4py.tools.cleandata.clipMeas.__init__","text":"Clips array to quantilles. Parameters: Name Type Description Default data ndarray np.ndarray, To be clipped. required Source code in arcos4py/tools/cleandata.py def __init__ ( self , data : np . ndarray ) -> None : \"\"\"Clips array to quantilles. Arguments: data: np.ndarray, To be clipped. \"\"\" self . data = data","title":"__init__()"},{"location":"api/#arcos4py.tools.cleandata.clipMeas.clip","text":"Clip input array to upper and lower quantilles defined in clip_low and clip_high. Parameters: Name Type Description Default clip_low float float, Lower clipping boundry (quantille). 0.001 clip_high float float, Upper clipping boundry (quantille). 0.999 Returns: Type Description ndarray Clipped array of input data. Source code in arcos4py/tools/cleandata.py def clip ( self , clip_low : float = 0.001 , clip_high : float = 0.999 ) -> np . ndarray : \"\"\"Clip input array to upper and lower quantilles defined in clip_low and clip_high. Arguments: clip_low: float, Lower clipping boundry (quantille). clip_high: float, Upper clipping boundry (quantille). Returns: Clipped array of input data. \"\"\" low , high = self . _calculate_percentile ( self . data , clip_low , clip_high ) out = self . data . clip ( low , high ) return out","title":"clip()"},{"location":"api/#arcos4py.tools.cleandata.interpolation","text":"Interpolate nan values in a numpy array.","title":"interpolation"},{"location":"api/#arcos4py.tools.cleandata.interpolation.__init__","text":"Interpolate nan values in a numpy array. Parameters: Name Type Description Default data ndarray np.ndarray, Where NaN should be replaced with interpolated values. required Source code in arcos4py/tools/cleandata.py def __init__ ( self , data : np . ndarray ): \"\"\"Interpolate nan values in a numpy array. Arguments: data: np.ndarray, Where NaN should be replaced with interpolated values. \"\"\" self . data = data","title":"__init__()"},{"location":"api/#arcos4py.tools.cleandata.interpolation.interpolate","text":"Interpolate nan and missing values. Returns: Type Description ndarray Interpolated input data. Source code in arcos4py/tools/cleandata.py def interpolate ( self ) -> np . ndarray : \"\"\"Interpolate nan and missing values. Returns: Interpolated input data. \"\"\" nans , x = self . _nan_helper ( self . data ) self . data [ nans ] = np . interp ( x ( nans ), x ( ~ nans ), self . data [ ~ nans ]) return self . data","title":"interpolate()"},{"location":"api/#arcos4py.tools.detect_events","text":"Module to track and detect collective events. Examples: >>> from arcos4py.tools import detectCollev >>> ts = detectCollev ( data ) >>> events_df = ts . run ()","title":"detect_events"},{"location":"api/#arcos4py.tools.detect_events.detectCollev","text":"Identifies and tracks collective signalling events. Requires binarized measurement column. Makes use of the dbscan algorithm, applys this to every timeframe and subsequently connects collective events between frames located within eps distance of each other.","title":"detectCollev"},{"location":"api/#arcos4py.tools.detect_events.detectCollev.__init__","text":"Constructs class with input parameters. Parameters: Name Type Description Default input_data DataFrame DataFrame, Input data to be processed. Must contain a binarized measurement column. required eps float float, The maximum distance between two samples for one to be considered as in the neighborhood of the other. This is not a maximum bound on the distances of points within a cluster. Value also used to connect collective events across multiple frames. 1 minClSz int int, Minimum size for a cluster to be identified as a collective event. 1 nPrev int int, Number of previous frames the tracking algorithm looks back to connect collective events. 1 posCols list list, List of position columns contained in the data. Must at least contain one ['x'] frame_column str str, String indicating the frame column in input_data 'time' id_column str str, String indicating the track id/id column in input_data 'id' bin_meas_column Optional[str] str, String indicating the bin_meas_column in input_data or None. 'meas' clid_column str str, String indicating the column name containing the collective event id's. 'clTrackID' Source code in arcos4py/tools/detect_events.py def __init__ ( self , input_data : pd . DataFrame , eps : float = 1 , minClSz : int = 1 , nPrev : int = 1 , posCols : list = [ \"x\" ], frame_column : str = 'time' , id_column : str = 'id' , bin_meas_column : Union [ str , None ] = 'meas' , clid_column : str = 'clTrackID' , ) -> None : \"\"\"Constructs class with input parameters. Arguments: input_data: DataFrame, Input data to be processed. Must contain a binarized measurement column. eps: float, The maximum distance between two samples for one to be considered as in the neighborhood of the other. This is not a maximum bound on the distances of points within a cluster. Value also used to connect collective events across multiple frames. minClSz: int, Minimum size for a cluster to be identified as a collective event. nPrev: int, Number of previous frames the tracking algorithm looks back to connect collective events. posCols: list, List of position columns contained in the data. Must at least contain one frame_column: str, String indicating the frame column in input_data id_column: str, String indicating the track id/id column in input_data bin_meas_column: str, String indicating the bin_meas_column in input_data or None. clid_column: str, String indicating the column name containing the collective event id's. \"\"\" # assign some variables passed in as arguments to the object self . input_data = input_data self . eps = eps self . minClSz = minClSz self . nPrev = nPrev self . frame_column = frame_column self . id_column = id_column self . bin_meas_column = bin_meas_column self . clid_column = clid_column self . posCols = posCols self . columns_input = self . input_data . columns self . clidFrame = f ' { clid_column } .frame' self . pos_cols_inputdata = [ col for col in self . posCols if col in self . columns_input ] # run input checks self . _run_input_checks ()","title":"__init__()"},{"location":"api/#arcos4py.tools.detect_events.detectCollev.run","text":"Method to execute the different steps necessary for tracking. Selectes columns. filters data on binary column > 1. Applies dbscan algorithm to every frame. Makes cluster ids unique across frames. Tracks collective events i.e. links cluster ids across frames. Creates final DataFrame. Returns: Type Description DataFrame Dataframe with tracked collective events is returned. Source code in arcos4py/tools/detect_events.py def run ( self ) -> pd . DataFrame : \"\"\"Method to execute the different steps necessary for tracking. 1. Selectes columns. 2. filters data on binary column > 1. 3. Applies dbscan algorithm to every frame. 4. Makes cluster ids unique across frames. 5. Tracks collective events i.e. links cluster ids across frames. 6. Creates final DataFrame. Returns: Dataframe with tracked collective events is returned. \"\"\" filtered_cols = self . _select_necessary_columns ( self . input_data , self . frame_column , self . id_column , self . pos_cols_inputdata , self . bin_meas_column , ) active_data = self . _filter_active ( filtered_cols , self . bin_meas_column ) db_data = self . _run_dbscan ( data = active_data , frame = self . frame_column , clid_frame = self . clidFrame , ) db_data = self . _make_db_id_unique ( db_data , frame = self . frame_column , clid_frame = self . clidFrame , clid = self . clid_column , ) tracked_events = self . _link_clusters_between_frames ( db_data , self . frame_column , self . clid_column ) return_columns = self . _get_export_columns () tracked_events = tracked_events [ return_columns ] if self . clid_column in self . input_data . columns : df_to_merge = self . input_data . drop ( columns = [ self . clid_column ]) else : df_to_merge = self . input_data tracked_events = tracked_events . merge ( df_to_merge , how = \"left\" ) return tracked_events","title":"run()"},{"location":"api/#arcos4py.tools.filter_events","text":"Module to filter collective events. Examples: >>> from arcos4py.tools import filterCollev >>> f = filterCollev ( data , 'time' , 'collid' ) >>> df = f . filter ( coll_duration : int = 9 , coll_total_size : int = 10 )","title":"filter_events"},{"location":"api/#arcos4py.tools.filter_events.filterCollev","text":"Select Collective events that last longer than coll_duration and have a larger total size than coll_total_size.","title":"filterCollev"},{"location":"api/#arcos4py.tools.filter_events.filterCollev.__init__","text":"Constructs filterCollev class with Parameters. Parameters: Name Type Description Default data DataFrame DataFrame, With detected collective events. required frame_column str str, Indicating the frame column in data. 'time' collid_column str str, Indicating the collective event id column in data. 'collid' Source code in arcos4py/tools/filter_events.py def __init__ ( self , data : pd . DataFrame , frame_column : str = \"time\" , collid_column : str = \"collid\" , ): \"\"\"Constructs filterCollev class with Parameters. Arguments: data: DataFrame, With detected collective events. frame_column: str, Indicating the frame column in data. collid_column: str, Indicating the collective event id column in data. \"\"\" self . data = data self . frame_column = frame_column self . collid_column = collid_column","title":"__init__()"},{"location":"api/#arcos4py.tools.filter_events.filterCollev.filter","text":"Filter collective events. Method to filter collective events according to the parameters specified in the object instance. Parameters: Name Type Description Default coll_duration int int, Minimal duration of collective events to be selected. 9 coll_total_size int int, Minimal total size of collective events to be selected. 10 Returns: Type Description DataFrame Returns pandas dataframe containing filtered collective events Source code in arcos4py/tools/filter_events.py def filter ( self , coll_duration : int = 9 , coll_total_size : int = 10 ) -> pd . DataFrame : \"\"\"Filter collective events. Method to filter collective events according to the parameters specified in the object instance. Arguments: coll_duration: int, Minimal duration of collective events to be selected. coll_total_size: int, Minimal total size of collective events to be selected. Returns: Returns pandas dataframe containing filtered collective events \"\"\" colev_duration = calcCollevStats () . calculate ( self . data , self . frame_column , self . collid_column ) filtered_df = self . _filter_collev ( self . data , colev_duration , self . collid_column , coll_duration , coll_total_size , ) return filtered_df","title":"filter()"},{"location":"api/#arcos4py.tools.stats","text":"Module containing tools to calculate statistics of collective events. Examples: >>> from arcos4py.tools import calcCollevStats >>> test = calcCollevStats () >>> out = test () . run ( data = data , frame_column = \"frame\" , collid_column = \"collid\" )","title":"stats"},{"location":"api/#arcos4py.tools.stats.calcCollevStats","text":"Class to calculate statistics of collective events.","title":"calcCollevStats"},{"location":"api/#arcos4py.tools.stats.calcCollevStats.__init__","text":"Class to calculate statistics of collective events. Source code in arcos4py/tools/stats.py def __init__ ( self ) -> None : \"\"\"Class to calculate statistics of collective events.\"\"\" pass","title":"__init__()"},{"location":"api/#arcos4py.tools.stats.calcCollevStats.calculate","text":"Calculate statistics of collective events. Parameters: Name Type Description Default data DataFrame DataFrame, Containing a collective events. required frame_column str str, String indicating the frame column in data. required collid_column str str, String indicating the collective event id column in data. required Returns: Type Description DataFrame Dataframe containing collective events stats. Source code in arcos4py/tools/stats.py def calculate ( self , data : pd . DataFrame , frame_column : str , collid_column : str ) -> pd . DataFrame : \"\"\"Calculate statistics of collective events. Arguments: data: DataFrame, Containing a collective events. frame_column: str, String indicating the frame column in data. collid_column: str, String indicating the collective event id column in data. Returns: Dataframe containing collective events stats. \"\"\" colev_stats = self . _get_collev_duration ( data , frame_column , collid_column ) return colev_stats","title":"calculate()"},{"location":"changelog/","text":"Changelog \u00b6 [0.1.0] - 2022-03-26 \u00b6 Added \u00b6 First release on PyPI.","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#010---2022-03-26","text":"","title":"[0.1.0] - 2022-03-26"},{"location":"changelog/#added","text":"First release on PyPI.","title":"Added"},{"location":"contributing/","text":"Contributing \u00b6 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions \u00b6 Report Bugs \u00b6 Report bugs at https://github.com/bgraedel/arcos4py/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs \u00b6 Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features \u00b6 Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation \u00b6 arcos4py could always use more documentation, whether as part of the official arcos4py docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback \u00b6 The best way to send feedback is to file an issue at https://github.com/bgraedel/arcos4py/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible to make it easier to implement. Remember that this is a volunteer-driven project and that contributions are welcome :) Get Started! \u00b6 Ready to contribute? Here's how to set up arcos4py for local development. Fork the arcos4py repo on GitHub. Clone your fork locally $ git clone git@github.com:your_name_here/arcos4py.git Ensure poetry is installed. Install dependencies and start your virtualenv: $ poetry install -E test -E doc -E dev Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: $ poetry run tox Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines \u00b6 Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.7, 3.8, and 3.9. Check https://github.com/bgraedel/arcos4py/actions and make sure that the tests pass for all supported Python versions. Tips \u00b6 $ poetry run pytest tests/test_arcos4py.py To run a subset of tests. Deploying \u00b6 A reminder for the maintainers on how to deploy: Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run: $ poetry run bump2version patch # possible: major / minor / patch $ git push $ git push --tags GitHub Actions will then deploy to PyPI if tests pass.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/bgraedel/arcos4py/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"arcos4py could always use more documentation, whether as part of the official arcos4py docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/bgraedel/arcos4py/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible to make it easier to implement. Remember that this is a volunteer-driven project and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up arcos4py for local development. Fork the arcos4py repo on GitHub. Clone your fork locally $ git clone git@github.com:your_name_here/arcos4py.git Ensure poetry is installed. Install dependencies and start your virtualenv: $ poetry install -E test -E doc -E dev Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: $ poetry run tox Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.7, 3.8, and 3.9. Check https://github.com/bgraedel/arcos4py/actions and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"contributing/#tips","text":"$ poetry run pytest tests/test_arcos4py.py To run a subset of tests.","title":"Tips"},{"location":"contributing/#deploying","text":"A reminder for the maintainers on how to deploy: Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run: $ poetry run bump2version patch # possible: major / minor / patch $ git push $ git push --tags GitHub Actions will then deploy to PyPI if tests pass.","title":"Deploying"},{"location":"installation/","text":"Installation \u00b6 Stable release \u00b6 To install arcos4py, run this command in your terminal: $ pip install arcos4py This is the preferred method to install arcos4py, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process. From source \u00b6 The source for arcos4py can be downloaded from the Github repo . You can either clone the public repository: $ git clone git://github.com/bgraedel/arcos4py Or download the tarball : $ curl -OJL https://github.com/bgraedel/arcos4py/tarball/master Once you have a copy of the source, you can install it with: $ pip install .","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#stable-release","text":"To install arcos4py, run this command in your terminal: $ pip install arcos4py This is the preferred method to install arcos4py, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process.","title":"Stable release"},{"location":"installation/#from-source","text":"The source for arcos4py can be downloaded from the Github repo . You can either clone the public repository: $ git clone git://github.com/bgraedel/arcos4py Or download the tarball : $ curl -OJL https://github.com/bgraedel/arcos4py/tarball/master Once you have a copy of the source, you can install it with: $ pip install .","title":"From source"},{"location":"usage/","text":"Usage \u00b6 To use arcos4py in a project import arcos4py Basic usage example of the main module \u00b6 To use the main class, generate a new class instance of ARCOS from arcos4py import ARCOS ts = ARCOS(data,[\"x\"], 'time', 'id', 'meas', 'clTrackID') Data has to be a time-series provided as a pandas DataFrame in the long format, containing at least a measurement column, a frame/index column, and an id column. Prepare the input data. \u00b6 interpolate Measurments \u00b6 If the measurement column contains missing values, run interpolate_measurements() first. ts.interpolate_measurements() Clip measurement to provided quantile range \u00b6 Clipping can be performed to remove extreme outliers from the dataset, but it is not necessary. ts.clip_meas(clip_low: = 0.001, clip_high=0.999) Rescale and Binarize the measurement \u00b6 Rescaling and detrending are optional for the algorithm to work but recommended. There are three options available: ['none', 'lm', 'runmed']. Rumned is the default. However, ARCOS requires binarized data to detect and track collective event clusters. Binarization is done by setting a threshold (binThr) and defining measurements below this threshold as 0 and above as 1. ts.bin_measurements(smoothK: int = 3, biasK = 5, peakThr = 1,binThr = 1, polyDeg = 1, biasMet = \"runmed\",) Detect collective events \u00b6 events_df = ts.trackCollev(eps = 1, minClsz = 1, nPrev = 1) TrackCollev returns a pandas DataFrame object containing a column with the collecive event id. Perform calculations without main class \u00b6 All functions from the ARCOS class are also accessible individually through the tools module, such as: from arcos4py.tools import trackCollev Additional modules \u00b6 In addition to the ARCOS algorithm and its helper classes, plots are generated with the plotting module, collective event statistics using the stats module. Please see the Modules Page for further details.","title":"Usage"},{"location":"usage/#usage","text":"To use arcos4py in a project import arcos4py","title":"Usage"},{"location":"usage/#basic-usage-example-of-the-main-module","text":"To use the main class, generate a new class instance of ARCOS from arcos4py import ARCOS ts = ARCOS(data,[\"x\"], 'time', 'id', 'meas', 'clTrackID') Data has to be a time-series provided as a pandas DataFrame in the long format, containing at least a measurement column, a frame/index column, and an id column.","title":"Basic usage example of the main module"},{"location":"usage/#prepare-the-input-data","text":"","title":"Prepare the input data."},{"location":"usage/#interpolate-measurments","text":"If the measurement column contains missing values, run interpolate_measurements() first. ts.interpolate_measurements()","title":"interpolate Measurments"},{"location":"usage/#clip-measurement-to-provided-quantile-range","text":"Clipping can be performed to remove extreme outliers from the dataset, but it is not necessary. ts.clip_meas(clip_low: = 0.001, clip_high=0.999)","title":"Clip measurement to provided quantile range"},{"location":"usage/#rescale-and-binarize-the-measurement","text":"Rescaling and detrending are optional for the algorithm to work but recommended. There are three options available: ['none', 'lm', 'runmed']. Rumned is the default. However, ARCOS requires binarized data to detect and track collective event clusters. Binarization is done by setting a threshold (binThr) and defining measurements below this threshold as 0 and above as 1. ts.bin_measurements(smoothK: int = 3, biasK = 5, peakThr = 1,binThr = 1, polyDeg = 1, biasMet = \"runmed\",)","title":"Rescale and Binarize the measurement"},{"location":"usage/#detect-collective-events","text":"events_df = ts.trackCollev(eps = 1, minClsz = 1, nPrev = 1) TrackCollev returns a pandas DataFrame object containing a column with the collecive event id.","title":"Detect collective events"},{"location":"usage/#perform-calculations-without-main-class","text":"All functions from the ARCOS class are also accessible individually through the tools module, such as: from arcos4py.tools import trackCollev","title":"Perform calculations without main class"},{"location":"usage/#additional-modules","text":"In addition to the ARCOS algorithm and its helper classes, plots are generated with the plotting module, collective event statistics using the stats module. Please see the Modules Page for further details.","title":"Additional modules"}]}