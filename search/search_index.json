{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"arcos4py \u00b6 Arcos4py is a python package to detect collective Spatio-temporal phenomena. The package is currently in the development phase. Additional features, such as more plotting functionality will come with future updates. This also means that functionality might change in the feature. Documentation: https://bgraedel.github.io/arcos4py GitHub: https://github.com/bgraedel/arcos4py PyPI: https://pypi.org/project/arcos4py/ Free software: MIT Features \u00b6 Automated Recognition of Collective Signalling for python (arcos4py) is a python port of the R package ARCOS (https://github.com/dmattek/ARCOS ) to identify collective spatial events in time-series data. The software identifies collective protein activation in 2- and 3D cell cultures and can track events over time. Such collective waves have been recently identified in various biological systems and have been demonstrated to play a crucial role in the maintenance of epithelial homeostasis (Gagliardi et al., 2020, Takeuchi et al., 2020, Aikin et al., 2020), in the acinar morphogenesis (Ender et al., 2020), osteoblast regeneration (De Simone et al., 2021), and the coordination of collective cell migration (Aoki et al., 2017, Hino et al., 2020). Despite its focus on cell signaling, the framework can also be applied to other spatiotemporally correlated phenomena. Todo's \u00b6 Add additional plotting functions such as collective event duration, noodle plots for collective-id tracks, measurement histogram, etc. Add additional tests for binarization and de-biasing modules. Add example processing to documentation with images of collective events. Data Format \u00b6 The time series should be arranged in a long table format where each row defines the object's location, time, and optionally the measurement value. ARCOS defines an ARCOS object on which several class methods can be used to prepare the data and calculate collective events. Optionally the objects used in the ARCOS class can be used individually by importing them from arcos.tools Installation \u00b6 Arcos4py can be installed from PyPI with: pip install arcos4py Credits \u00b6 Maciej Dobrzynski created the original ARCOS algorithm. This package was created with Cookiecutter and the waynerv/cookiecutter-pypackage project template.","title":"Home"},{"location":"#arcos4py","text":"Arcos4py is a python package to detect collective Spatio-temporal phenomena. The package is currently in the development phase. Additional features, such as more plotting functionality will come with future updates. This also means that functionality might change in the feature. Documentation: https://bgraedel.github.io/arcos4py GitHub: https://github.com/bgraedel/arcos4py PyPI: https://pypi.org/project/arcos4py/ Free software: MIT","title":"arcos4py"},{"location":"#features","text":"Automated Recognition of Collective Signalling for python (arcos4py) is a python port of the R package ARCOS (https://github.com/dmattek/ARCOS ) to identify collective spatial events in time-series data. The software identifies collective protein activation in 2- and 3D cell cultures and can track events over time. Such collective waves have been recently identified in various biological systems and have been demonstrated to play a crucial role in the maintenance of epithelial homeostasis (Gagliardi et al., 2020, Takeuchi et al., 2020, Aikin et al., 2020), in the acinar morphogenesis (Ender et al., 2020), osteoblast regeneration (De Simone et al., 2021), and the coordination of collective cell migration (Aoki et al., 2017, Hino et al., 2020). Despite its focus on cell signaling, the framework can also be applied to other spatiotemporally correlated phenomena.","title":"Features"},{"location":"#todos","text":"Add additional plotting functions such as collective event duration, noodle plots for collective-id tracks, measurement histogram, etc. Add additional tests for binarization and de-biasing modules. Add example processing to documentation with images of collective events.","title":"Todo's"},{"location":"#data-format","text":"The time series should be arranged in a long table format where each row defines the object's location, time, and optionally the measurement value. ARCOS defines an ARCOS object on which several class methods can be used to prepare the data and calculate collective events. Optionally the objects used in the ARCOS class can be used individually by importing them from arcos.tools","title":"Data Format"},{"location":"#installation","text":"Arcos4py can be installed from PyPI with: pip install arcos4py","title":"Installation"},{"location":"#credits","text":"Maciej Dobrzynski created the original ARCOS algorithm. This package was created with Cookiecutter and the waynerv/cookiecutter-pypackage project template.","title":"Credits"},{"location":"api/","text":"Arcos4py top level module. This package is a python port of an R package to detect and analyse collective phenomena. arcos4py \u00b6 Main Module of arcos4py. This module contains the ARCOS class, which implements most functionallity of arcos4py to prepare data and to detect and track collective events. Examples: >>> from arcos4py import ARCOS >>> ts = ARCOS ( data ,[ \"x\" ], 'time' , 'id' , 'meas' , 'clTrackID' ) >>> ts . interpolate_measurements () >>> ts . clip_meas ( clip_low = 0.001 , clip_high = 0.999 ) >>> ts . bin_measurements ( smoothK int = 3 , biasK = 51 , peakThr = 0.2 , binThr = 0.1 , polyDeg = 1 , biasMet = \"runmed\" ,) >>> events_df = ts . trackCollev ( eps = 1 , minClsz = 1 , nPrev = 1 ) ARCOS \u00b6 Detects and tracks collective events in a tracked time-series dataset. Requires binarized measurement column, that can be generated with the bin_measurements method. Tracking makes use of the dbscan algorithm, which is applied to every frame and subsequently connects collective events between frames located within eps distance of each other. Attributes: Name Type Description data DataFrame Data of tracked time-series in \"long format\". Can be used to acess modified dataframe at any point. posCols list List containing position column names strings inside data e.g. At least one dimension is required. frame_column str Indicating the frame column in input_data. id_column str Indicating the track id/id column in input_data. measurement_column str Indicating the measurement column in input_data. clid_column str Indicating the column name containing the collective event ids. __init__ ( self , data , posCols = [ 'x' ], frame_column = 'time' , id_column = 'id' , measurement_column = 'meas' , clid_column = 'clTrackID' ) special \u00b6 Constructs class with provided arguments. Parameters: Name Type Description Default data DataFrame Input Data of tracked time-series in \"long format\" containing position columns, a measurement and an object ID column. required posCols list List ontaining position column names strings inside data e.g. At least one dimension is required. ['x'] frame_column str Indicating the frame column in input_data. 'time' id_column str Indicating the track id/id column in input_data. 'id' measurement_column str Indicating the measurement column in input_data. 'meas' clid_column str Indicating the column name containing the collective event ids. 'clTrackID' Source code in arcos4py/arcos4py.py def __init__ ( self , data : pd . DataFrame , posCols : list = [ \"x\" ], frame_column : str = 'time' , id_column : str = 'id' , measurement_column : str = 'meas' , clid_column : str = 'clTrackID' , ) -> None : \"\"\"Constructs class with provided arguments. Arguments: data (DataFrame): Input Data of tracked time-series in \"long format\" containing position columns, a measurement and an object ID column. posCols (list): List ontaining position column names strings inside data e.g. At least one dimension is required. frame_column (str): Indicating the frame column in input_data. id_column (str): Indicating the track id/id column in input_data. measurement_column (str): Indicating the measurement column in input_data. clid_column (str): Indicating the column name containing the collective event ids. \"\"\" self . data = data self . posCols = posCols self . frame_column = frame_column self . id_column = id_column self . measurement_column = measurement_column self . clid_column = clid_column self . data_binarized : pd . DataFrame = None self . tracked_events : pd . DataFrame = None self . bin_col : Union [ str , None ] = None # to check if no measurement was provided assign None self . data = self . data . sort_values ( by = [ self . frame_column , self . id_column ]) self . _check_col () if self . measurement_column is not None : self . resc_col = f \" { self . measurement_column } .resc\" self . bin_col = f \" { self . measurement_column } .bin\" __repr__ ( self ) special \u00b6 Set __repr___ to return self.data. Source code in arcos4py/arcos4py.py def __repr__ ( self ) -> pd . DataFrame : \"\"\"Set __repr___ to return self.data.\"\"\" return repr ( self . data ) bin_measurements ( self , smoothK = 3 , biasK = 51 , peakThr = 0.2 , binThr = 0.1 , polyDeg = 1 , biasMet = 'runmed' ) \u00b6 Smooth, de-trend, and binarise the input data. First a short-term median filter with size smoothK is applied to remove fast noise from the time series. If the de-trending method is set to \"none\", smoothing is applied on globally rescaled time series. The subsequent de-trending can be performed with a long-term median filter with the size biasK {biasMet = \"runmed\"} or by fitting a polynomial of degree polyDeg {biasMet = \"lm\"}. After de-trending, if the global difference between min/max is greater than the threshold the signal is rescaled to the (0,1) range. The final signal is binarised using the binThr threshold Parameters: Name Type Description Default smoothK int Size of the short-term median smoothing filter. 3 biasK int Size of the long-term de-trending median filter 51 peakThr float Threshold for rescaling of the de-trended signal. 0.2 binThr float Threshold for binary classification. 0.1 polyDeg int Sets the degree of the polynomial for lm fitting. 1 biasMet str De-trending method, one of ['runmed', 'lm', 'none']. 'runmed' Returns: Type Description DataFrame DataFrame with detrended/smoothed and binarized measurement column. Source code in arcos4py/arcos4py.py def bin_measurements ( self , smoothK : int = 3 , biasK : int = 51 , peakThr : float = 0.2 , binThr : float = 0.1 , polyDeg : int = 1 , biasMet : str = \"runmed\" , ) -> pd . DataFrame : r \"\"\"Smooth, de-trend, and binarise the input data. First a short-term median filter with size smoothK is applied to remove fast noise from the time series. If the de-trending method is set to \"none\", smoothing is applied on globally rescaled time series. The subsequent de-trending can be performed with a long-term median filter with the size biasK {biasMet = \"runmed\"} or by fitting a polynomial of degree polyDeg {biasMet = \"lm\"}. After de-trending, if the global difference between min/max is greater than the threshold the signal is rescaled to the (0,1) range. The final signal is binarised using the binThr threshold Arguments: smoothK (int): Size of the short-term median smoothing filter. biasK (int): Size of the long-term de-trending median filter peakThr (float): Threshold for rescaling of the de-trended signal. binThr (float): Threshold for binary classification. polyDeg (int): Sets the degree of the polynomial for lm fitting. biasMet (str): De-trending method, one of ['runmed', 'lm', 'none']. Returns: DataFrame with detrended/smoothed and binarized measurement column. \"\"\" self . data = binData ( self . data , smoothK , biasK , peakThr , binThr , polyDeg , biasMet , colMeas = self . measurement_column , colGroup = self . id_column , ) . run () return self . data clip_meas ( self , clip_low = 0.001 , clip_high = 0.999 ) \u00b6 Clip measurement column to upper and lower quantiles defined in clip_low and clip_high. Parameters: Name Type Description Default clip_low float Lower clipping boundary (quantile). 0.001 clip_high float Upper clipping boundary (quantile). 0.999 Returns: Type Description DataFrame Dataframe with in place clipped measurement column. Source code in arcos4py/arcos4py.py def clip_meas ( self , clip_low : float = 0.001 , clip_high : float = 0.999 ) -> pd . DataFrame : \"\"\"Clip measurement column to upper and lower quantiles defined in clip_low and clip_high. Arguments: clip_low (float): Lower clipping boundary (quantile). clip_high (float): Upper clipping boundary (quantile). Returns: Dataframe with in place clipped measurement column. \"\"\" meas_column = self . data [ self . measurement_column ] . to_numpy () meas_clipped = clipMeas ( meas_column ) . clip ( clip_low , clip_high ) self . data [ self . measurement_column ] = meas_clipped return self . data interpolate_measurements ( self ) \u00b6 Interpolates NaN's in place in measurement column. Returns: Type Description DataFrame Dataframe with interpolated measurement column. Source code in arcos4py/arcos4py.py def interpolate_measurements ( self ) -> pd . DataFrame : \"\"\"Interpolates NaN's in place in measurement column. Returns: Dataframe with interpolated measurement column. \"\"\" meas_interp = interpolation ( self . data ) . interpolate () self . data = meas_interp return self . data trackCollev ( self , eps = 1 , minClsz = 1 , nPrev = 1 ) \u00b6 Requires binarized measurement column. Makes use of the dbscan algorithm, applies this to every timeframe and subsequently connects collective events between frames located within eps distance of each other. Parameters: Name Type Description Default eps float The maximum distance between two samples for one to be considered as in the neighbourhood of the other. This is not a maximum bound on the distances of points within a cluster. Value is also used to connect collective events across multiple frames. 1 minClsz int The minimum size for a cluster to be identified as a collective event 1 nPrev int Number of previous frames the tracking algorithm looks back to connect collective events 1 Returns: Type Description DataFrame DataFrame with detected collective events across time. Source code in arcos4py/arcos4py.py def trackCollev ( self , eps : float = 1 , minClsz : int = 1 , nPrev : int = 1 ) -> pd . DataFrame : \"\"\"Requires binarized measurement column. Makes use of the dbscan algorithm, applies this to every timeframe and subsequently connects collective events between frames located within eps distance of each other. Arguments: eps (float): The maximum distance between two samples for one to be considered as in the neighbourhood of the other. This is not a maximum bound on the distances of points within a cluster. Value is also used to connect collective events across multiple frames. minClsz (str): The minimum size for a cluster to be identified as a collective event nPrev (int): Number of previous frames the tracking algorithm looks back to connect collective events Returns: DataFrame with detected collective events across time. \"\"\" self . data = detectCollev ( self . data , eps = eps , minClSz = minClsz , nPrev = nPrev , posCols = self . posCols , frame_column = self . frame_column , id_column = self . id_column , bin_meas_column = self . bin_col , clid_column = self . clid_column , ) . run () return self . data plotting special \u00b6 Tools for plotting collective events. plotting \u00b6 Module to plot different metrics generated by arcos4py functions. Examples: >>> from arcos4py.plotting import plotOriginalDetrended >>> plot = arcosPlots ( data , 'time' , 'meas' , 'detrended' , 'id' ) >>> plot . plot_detrended () dataPlots \u00b6 Plot different metrics of input data. Attributes: Name Type Description data Dataframe containing ARCOS data. frame str name of frame column in data. measurement str name of measurement column in data. id str name of track id column. __init__ ( self , data , frame , measurement , id ) special \u00b6 Plot different metrics such as histogram, position-t and density. Parameters: Name Type Description Default data pd.DataFrame containing ARCOS data. required frame str name of frame column in data. required measurement str name of measurement column in data. required id str name of track id column. required Source code in arcos4py/plotting/plotting.py def __init__ ( self , data : pd . DataFrame , frame : str , measurement : str , id : str ): \"\"\"Plot different metrics such as histogram, position-t and density. Arguments: data (Dataframe): containing ARCOS data. frame (str): name of frame column in data. measurement (str): name of measurement column in data. id (str): name of track id column. \"\"\" self . data = data self . id = id self . frame = frame density_plot ( self , measurement_col , * args , ** kwargs ) \u00b6 Density plot of measurement. Uses Seaborn distplot to plot measurement density. Parameters: Name Type Description Default measurement_col str name of measurement column. required *args Any arguments passed on to seaborn histplot function. () **kwargs Any keyword arguments passed on to seaborn histplot function. {} Source code in arcos4py/plotting/plotting.py def density_plot ( self , measurement_col : str , * args , ** kwargs ): \"\"\"Density plot of measurement. Uses Seaborn distplot to plot measurement density. Arguments: measurement_col (str): name of measurement column. *args (Any): arguments passed on to seaborn histplot function. **kwargs (Any): keyword arguments passed on to seaborn histplot function. \"\"\" sns . displot ( self . data [ measurement_col ], kind = \"kde\" , palette = \"pastel\" , label = measurement_col , * args , ** kwargs ) # Plot formatting plt . legend ( prop = { 'size' : 10 }) plt . title ( 'Density Plot of Measurement' ) plt . xlabel ( 'Measurement' ) plt . ylabel ( 'Density' ) plt . show () histogram ( self , bins = 'auto' , * args , ** kwargs ) \u00b6 Histogram of tracklenght. Uses seaborn histplot function to plot tracklenght histogram. Parameters: Name Type Description Default bins str number or width of bins in histogram 'auto' *args Any arguments passed on to seaborn histplot function. () **kwargs Any keyword arguments passed on to seaborn histplot function. {} Source code in arcos4py/plotting/plotting.py def histogram ( self , bins : str = 'auto' , * args , ** kwargs ): \"\"\"Histogram of tracklenght. Uses seaborn histplot function to plot tracklenght histogram. Arguments: bins (str): number or width of bins in histogram *args (Any): arguments passed on to seaborn histplot function. **kwargs (Any): keyword arguments passed on to seaborn histplot function. \"\"\" # Draw histogram track_length = self . data . groupby ( self . id ) . size () sns . histplot ( track_length , label = \"Track Length\" , bins = bins , * args , ** kwargs ) # Plot formatting plt . title ( 'Track length Histogram' ) plt . xlabel ( 'Track Length' ) plt . ylabel ( 'Count' ) plt . show () position_t_plot ( self , posCol = { 'x' }, n = 20 ) \u00b6 Plots X and Y over T to visualize tracklength. Parameters: Name Type Description Default posCol set[str] containing names of position columns in data. {'x'} n int number of samples to plot. 20 Source code in arcos4py/plotting/plotting.py def position_t_plot ( self , posCol : set [ str ] = { 'x' }, n : int = 20 ): \"\"\"Plots X and Y over T to visualize tracklength. Arguments: posCol (set): containing names of position columns in data. n (int): number of samples to plot. \"\"\" sample = pd . Series ( self . data [ self . id ] . unique ()) . sample ( n ) pd_from_r_df = self . data . loc [ self . data [ self . id ] . isin ( sample )] fig , axes = plt . subplots ( 1 , len ( posCol ), figsize = ( 6 , 3 )) for label , df in pd_from_r_df . groupby ( self . id ): for index , value in enumerate ( posCol ): df . plot ( x = self . frame , y = value , ax = axes [ index ], legend = None ) for index , value in enumerate ( posCol ): axes [ index ] . set_title ( value ) plt . show () plotOriginalDetrended \u00b6 Plot different detrended vs original data. Attributes: Name Type Description data Dataframe containing ARCOS data. frame str name of frame column in data. measurement str name of measurement column in data. detrended str name of detrended column with detrended data. id str name of track id column. __init__ ( self , data , frame , measurement , detrended , id ) special \u00b6 Plot detrended vs original data. Parameters: Name Type Description Default data pd.DataFrame containing ARCOS data. required frame str name of frame column in data. required measurement str name of measurement column in data. required detrended str name of detrended column with detrended data. required id str name of track id column. required Source code in arcos4py/plotting/plotting.py def __init__ ( self , data : pd . DataFrame , frame : str , measurement : str , detrended : str , id : str ): \"\"\"Plot detrended vs original data. Arguments: data (Dataframe): containing ARCOS data. frame (str): name of frame column in data. measurement (str): name of measurement column in data. detrended (str): name of detrended column with detrended data. id (str): name of track id column. \"\"\" self . data = data self . measurement = measurement self . detrended = detrended self . id = id self . frame = frame plot_detrended ( self , n_samples = 25 , subplots = ( 5 , 5 ), plotsize = ( 20 , 10 )) \u00b6 Method to plot detrended vs original data. Parameters: Name Type Description Default n_samples int Number of tracks to plot. 25 subplots tuple Number of subplots, should be approx. one per sample. (5, 5) plotsize tuple Size of generated plot. (20, 10) Returns: Type Description matplotlib.axes.Axes Matplotlib figure of detrended vs original data. Source code in arcos4py/plotting/plotting.py def plot_detrended ( self , n_samples : int = 25 , subplots : tuple = ( 5 , 5 ), plotsize : tuple = ( 20 , 10 ) ) -> matplotlib . axes . Axes : \"\"\"Method to plot detrended vs original data. Arguments: n_samples (int): Number of tracks to plot. subplots (tuple): Number of subplots, should be approx. one per sample. plotsize (tuple): Size of generated plot. Returns: Matplotlib figure of detrended vs original data. \"\"\" vals = np . random . choice ( self . data [ self . id ] . unique (), n_samples , replace = False ) self . data = self . data . set_index ( self . id ) . loc [ vals ] . reset_index () grouped = self . data . groupby ( self . id ) ncols = subplots [ 0 ] nrows = subplots [ 1 ] fig , axes = plt . subplots ( nrows = nrows , ncols = ncols , figsize = plotsize , sharey = True ) for ( key , ax ) in zip ( grouped . groups . keys (), axes . flatten ()): grouped . get_group ( key ) . plot ( x = self . frame , y = [ self . measurement , self . detrended ], ax = ax ) ax . get_legend () . remove () handles , labels = ax . get_legend_handles_labels () fig . legend ( handles , labels , loc = \"lower right\" ) return fig statsPlots \u00b6 Plot data generated by the stats module. Attributes: Name Type Description data DataFrame containing ARCOS stats data. __init__ ( self , data ) special \u00b6 Plot detrended vs original data. Parameters: Name Type Description Default data pd.DataFrame containing ARCOS stats data. required Source code in arcos4py/plotting/plotting.py def __init__ ( self , data : pd . DataFrame ): \"\"\"Plot detrended vs original data. Arguments: data (DataFrame): containing ARCOS stats data. \"\"\" self . data = data plot_events_duration ( self , total_size , duration , point_size = 40 , * args , ** kwargs ) \u00b6 Scatterplot of collective event duration. Parameters: Name Type Description Default total_size str name of total size column. required duration str , name of column with collective event duration. required point_size int scatterplot point size. 40 *args Any Arguments passed on to seaborn scatterplot function. () **kwargs Any Keyword arguments passed on to seaborn scatterplot function. {} Source code in arcos4py/plotting/plotting.py def plot_events_duration ( self , total_size : str , duration : str , point_size : int = 40 , * args , ** kwargs ): \"\"\"Scatterplot of collective event duration. Arguments: total_size (str): name of total size column. duration (str):, name of column with collective event duration. point_size (int): scatterplot point size. *args (Any): Arguments passed on to seaborn scatterplot function. **kwargs (Any): Keyword arguments passed on to seaborn scatterplot function. \"\"\" plot = sns . scatterplot ( x = self . data [ total_size ], y = self . data [ duration ], s = point_size , * args , ** kwargs ) return plot tools special \u00b6 Tools for detecting collective events. binarize_detrend \u00b6 Module containing binarization and detrending classes. Examples: >>> from arcos4py.tools import binData >>> binarizer = binData ( x = data , biasMet = \"lm\" , colMeas = \"ERK_KTR\" , colGroup = \"trackID\" , polyDeg = 1 ) >>> data_rescaled = binarizer . run () binData \u00b6 Smooth, de-trend, and binarise the input data. First a short-term median filter with size smoothK is applied to remove fast noise from the time series. If the de-trending method is set to \"none\", smoothing is applied on globally rescaled time series. The subsequent de-trending can be performed with a long-term median filter with the size biasK {biasMet = \"runmed\"} or by fitting a polynomial of degree polyDeg {biasMet = \"lm\"}. After de-trending, if the global difference between min/max is greater than the threshold the signal is rescaled to the (0,1) range. The final signal is binarised using the binThr threshold. __init__ ( self , x , smoothK = 3 , biasK = 51 , peakThr = 0.2 , binThr = 0.1 , polyDeg = 1 , biasMet = 'runmed' , colMeas = 'meas' , colGroup = 'id' ) special \u00b6 Smooth, de-trend, and binarise the input data. Parameters: Name Type Description Default x DataFrame The time-series data for smoothing. required smoothK int Size of the short-term median smoothing filter. 3 biasK int Size of the long-term de-trending median filter. 51 peakThr float Threshold for rescaling of the de-trended signal. 0.2 binThr float Threshold for binarizing the de-trended signal. 0.1 polyDeg int Sets the degree of the polynomial for lm fitting. 1 biasMet str De-trending method, one of ['runmed', 'lm', 'none']. 'runmed' colMeas str Measurement column in x. 'meas' colGroup str Track id column in x. 'id' Source code in arcos4py/tools/binarize_detrend.py def __init__ ( self , x : pd . DataFrame , smoothK : int = 3 , biasK : int = 51 , peakThr : float = 0.2 , binThr : float = 0.1 , polyDeg : int = 1 , biasMet : str = \"runmed\" , colMeas : str = \"meas\" , colGroup : str = \"id\" , ) -> None : \"\"\"Smooth, de-trend, and binarise the input data. Arguments: x (DataFrame): The time-series data for smoothing. smoothK (int): Size of the short-term median smoothing filter. biasK (int): Size of the long-term de-trending median filter. peakThr (float): Threshold for rescaling of the de-trended signal. binThr (float): Threshold for binarizing the de-trended signal. polyDeg (int): Sets the degree of the polynomial for lm fitting. biasMet (str): De-trending method, one of ['runmed', 'lm', 'none']. colMeas (str): Measurement column in x. colGroup (str): Track id column in x. \"\"\" super () . __init__ ( x , smoothK , biasK , peakThr , polyDeg , biasMet , colMeas , colGroup ) self . binThr = binThr self . col_resc = f \" { self . colMeas } .resc\" self . col_bin = f \" { self . colMeas } .bin\" run ( self ) \u00b6 Runs binarization and detrending. If the bias Method is 'none', first it rescales the data to between [0,1], then local smoothing is applied to the measurement by groups, followed by binarization. If biasMeth is one of ['lm', 'runmed'], first the data is detrended locally with a median filter and then detrended globally, for 'lm' with a linear model and for 'runmed' with a median filter. Followed by binarization of the data. Returns (DataFrame): Dataframe containing Binarized data, rescaled data and the original columns Source code in arcos4py/tools/binarize_detrend.py def run ( self ) -> pd . DataFrame : \"\"\"Runs binarization and detrending. If the bias Method is 'none', first it rescales the data to between [0,1], then local smoothing is applied to the measurement by groups, followed by binarization. If biasMeth is one of ['lm', 'runmed'], first the data is detrended locally with a median filter and then detrended globally, for 'lm' with a linear model and for 'runmed' with a median filter. Followed by binarization of the data. Returns (DataFrame): Dataframe containing Binarized data, rescaled data and the original columns \"\"\" if self . biasMet == \"none\" : rescaled_data = self . _rescale_data ( self . x ) detrended_data = self . detrend ( rescaled_data , self . colGroup , self . col_resc ) binarized_data = self . _bin_data ( detrended_data ) else : detrended_data = self . detrend ( self . x , self . colGroup , self . colMeas ) binarized_data = self . _bin_data ( detrended_data ) return binarized_data detrender \u00b6 Smooth and de-trend input data. First, a short-term median filter with size smoothK is applied to remove fast noise from the time series. The subsequent de-trending can be performed with a long-term median filter with the size biasK {biasMet = \"runmed\"} or by fitting a polynomial of degree polyDeg {biasMet = \"lm\"}. Attributes: Name Type Description x DataFrame Time series data for smoothing. smoothK int Representing the size of the short-term median smoothing filter. biasK int Representing the size of the long-term de-trending median filter. peakThr float Threshold for rescaling of the de-trended signal. polyDeg int Sets the degree of the polynomial for lm fitting. biasMet str Indicating de-trending method, one of ['runmed', 'lm', 'none']. colMeas str Name of measurement column in x. colGroup str Name of id column in x. __init__ ( self , x , smoothK = 3 , biasK = 51 , peakThr = 0.2 , polyDeg = 1 , biasMet = 'runmed' , colMeas = 'meas' , colGroup = 'id' ) special \u00b6 Smooth and de-trend input data. Parameters: Name Type Description Default x DataFrame Time series data for smoothing. required smoothK int Representing the size of the short-term median smoothing filter. 3 biasK int Representing the size of the long-term de-trending median filter. 51 peakThr float Threshold for rescaling of the de-trended signal. 0.2 polyDeg int Sets the degree of the polynomial for lm fitting. 1 biasMet str Indicating de-trending method, one of ['runmed', 'lm', 'none']. 'runmed' colMeas str Name of measurement column in x. 'meas' colGroup str Name of id column in x. 'id' Source code in arcos4py/tools/binarize_detrend.py def __init__ ( self , x : pd . DataFrame , smoothK : int = 3 , biasK : int = 51 , peakThr : float = 0.2 , polyDeg : int = 1 , biasMet : str = \"runmed\" , colMeas : str = \"meas\" , colGroup : str = \"id\" , ) -> None : \"\"\"Smooth and de-trend input data. Arguments: x (DataFrame): Time series data for smoothing. smoothK (int): Representing the size of the short-term median smoothing filter. biasK (int): Representing the size of the long-term de-trending median filter. peakThr (float): Threshold for rescaling of the de-trended signal. polyDeg (int): Sets the degree of the polynomial for lm fitting. biasMet (str): Indicating de-trending method, one of ['runmed', 'lm', 'none']. colMeas (str): Name of measurement column in x. colGroup (str): Name of id column in x. \"\"\" # check if biasmethod contains one of these three types biasMet_types = [ \"runmed\" , \"lm\" , \"none\" ] if biasMet not in biasMet_types : raise ValueError ( f \"Invalid bias method. Expected one of: { biasMet_types } \" ) self . x = x self . smoothK = smoothK self . biasK = biasK self . peakThr = peakThr self . polyDeg = polyDeg self . biasMet = biasMet self . colMeas = colMeas self . colGroup = colGroup detrend ( self , data , group_col , resc_col ) \u00b6 Run detrinding on input data. The method applies detrending to each group defined in group_col and outputs it into the resc_column. Returns (DataFrame): Dataframe containing rescaled column. Source code in arcos4py/tools/binarize_detrend.py def detrend ( self , data : pd . DataFrame , group_col : str , resc_col ) -> pd . DataFrame : \"\"\"Run detrinding on input data. The method applies detrending to each group defined in group_col and outputs it into the resc_column. Returns (DataFrame): Dataframe containing rescaled column. \"\"\" data_gp = data . groupby ([ group_col ]) data = data_gp . apply ( lambda y : self . _run_detrend ( y , resc_col )) return data cleandata \u00b6 Module containing clipping and interpolation classes. Examples: >>> # Interpolation >>> from arcos4py.tools import interpolation >>> a = interpolation ( data ) >>> data_interp = a . interpolate () >>> # clipping >>> from arcos4py.tools import clipMeas >>> a = clipMeas ( data ) >>> data_clipped = a . clip ( 0.001 , 0.999 ) clipMeas \u00b6 Clip input array. __init__ ( self , data ) special \u00b6 Clips array to quantilles. Parameters: Name Type Description Default data ndarray To be clipped. required Source code in arcos4py/tools/cleandata.py def __init__ ( self , data : np . ndarray ) -> None : \"\"\"Clips array to quantilles. Arguments: data (ndarray): To be clipped. \"\"\" self . data = data clip ( self , clip_low = 0.001 , clip_high = 0.999 ) \u00b6 Clip input array to upper and lower quantiles defined in clip_low and clip_high. Parameters: Name Type Description Default clip_low float Lower clipping boundary (quantile). 0.001 clip_high float Upper clipping boundry (quantille). 0.999 Returns (ndarray): A clipped array of the input data. Source code in arcos4py/tools/cleandata.py def clip ( self , clip_low : float = 0.001 , clip_high : float = 0.999 ) -> np . ndarray : \"\"\"Clip input array to upper and lower quantiles defined in clip_low and clip_high. Arguments: clip_low (float): Lower clipping boundary (quantile). clip_high (float): Upper clipping boundry (quantille). Returns (ndarray): A clipped array of the input data. \"\"\" low , high = self . _calculate_percentile ( self . data , clip_low , clip_high ) out = self . data . clip ( low , high ) return out interpolation \u00b6 Interpolate nan values in a numpy array. Attributes: Name Type Description data DataFrame Where NaN should be replaced with interpolated values. __init__ ( self , data ) special \u00b6 Interpolate nan values in a pandas dataframe. Uses pandas.interpolate with liner interpolation. Parameters: Name Type Description Default data DataFrame Where NaN should be replaced with interpolated values. required Source code in arcos4py/tools/cleandata.py def __init__ ( self , data : pd . DataFrame ): \"\"\"Interpolate nan values in a pandas dataframe. Uses pandas.interpolate with liner interpolation. Arguments: data (DataFrame): Where NaN should be replaced with interpolated values. \"\"\" self . data = data interpolate ( self ) \u00b6 Interpolate nan and missing values. Returns (DataFrame): Interpolated input data. Source code in arcos4py/tools/cleandata.py def interpolate ( self ) -> pd . DataFrame : \"\"\"Interpolate nan and missing values. Returns (DataFrame): Interpolated input data. \"\"\" self . data = self . data . interpolate ( axis = 0 ) return self . data detect_events \u00b6 Module to track and detect collective events. Examples: >>> from arcos4py.tools import detectCollev >>> ts = detectCollev ( data ) >>> events_df = ts . run () detectCollev \u00b6 Identifies and tracks collective signalling events. Requires binarized measurement column. Makes use of the dbscan algorithm, applies this to every timeframe and subsequently connects collective events between frames located within eps distance of each other. Attributes: Name Type Description input_data DataFrame Input data to be processed. Must contain a binarized measurement column. eps float The maximum distance between two samples for one to be considered as in the neighbourhood of the other. This is not a maximum bound on the distances of points within a cluster. Value is also used to connect collective events across multiple frames. minClSz int Minimum size for a cluster to be identified as a collective event. nPrev int Number of previous frames the tracking algorithm looks back to connect collective events. posCols list List of position columns contained in the data. Must at least contain one frame_column str Indicating the frame column in input_data. id_column str Indicating the track id/id column in input_data. bin_meas_column str Indicating the bin_meas_column in input_data or None. clid_column str Indicating the column name containing the ids of collective events. __init__ ( self , input_data , eps = 1 , minClSz = 1 , nPrev = 1 , posCols = [ 'x' ], frame_column = 'time' , id_column = 'id' , bin_meas_column = 'meas' , clid_column = 'clTrackID' ) special \u00b6 Constructs class with input parameters. Parameters: Name Type Description Default input_data DataFrame Input data to be processed. Must contain a binarized measurement column. required eps float The maximum distance between two samples for one to be considered as in the neighbourhood of the other. This is not a maximum bound on the distances of points within a cluster. Value is also used to connect collective events across multiple frames. 1 minClSz int Minimum size for a cluster to be identified as a collective event. 1 nPrev int Number of previous frames the tracking algorithm looks back to connect collective events. 1 posCols list List of position columns contained in the data. Must at least contain one ['x'] frame_column str Indicating the frame column in input_data. 'time' id_column str Indicating the track id/id column in input_data. 'id' bin_meas_column Optional[str] Indicating the bin_meas_column in input_data or None. 'meas' clid_column str Indicating the column name containing the ids of collective events. 'clTrackID' Source code in arcos4py/tools/detect_events.py def __init__ ( self , input_data : pd . DataFrame , eps : float = 1 , minClSz : int = 1 , nPrev : int = 1 , posCols : list = [ \"x\" ], frame_column : str = 'time' , id_column : str = 'id' , bin_meas_column : Union [ str , None ] = 'meas' , clid_column : str = 'clTrackID' , ) -> None : \"\"\"Constructs class with input parameters. Arguments: input_data (DataFrame): Input data to be processed. Must contain a binarized measurement column. eps (float): The maximum distance between two samples for one to be considered as in the neighbourhood of the other. This is not a maximum bound on the distances of points within a cluster. Value is also used to connect collective events across multiple frames. minClSz (int): Minimum size for a cluster to be identified as a collective event. nPrev (int): Number of previous frames the tracking algorithm looks back to connect collective events. posCols (list): List of position columns contained in the data. Must at least contain one frame_column (str): Indicating the frame column in input_data. id_column (str): Indicating the track id/id column in input_data. bin_meas_column (str): Indicating the bin_meas_column in input_data or None. clid_column (str): Indicating the column name containing the ids of collective events. \"\"\" # assign some variables passed in as arguments to the object self . input_data = input_data self . eps = eps self . minClSz = minClSz self . nPrev = nPrev self . frame_column = frame_column self . id_column = id_column self . bin_meas_column = bin_meas_column self . clid_column = clid_column self . posCols = posCols self . columns_input = self . input_data . columns self . clidFrame = f ' { clid_column } .frame' self . pos_cols_inputdata = [ col for col in self . posCols if col in self . columns_input ] # run input checks self . _run_input_checks () run ( self ) \u00b6 Method to execute the different steps necessary for tracking. Selects columns. filters data on binary column > 1. Applies dbscan algorithm to every frame. Makes cluster ids unique across frames. Tracks collective events i.e. links cluster ids across frames. Creates final DataFrame. Returns (Dataframe): Dataframe with tracked collective events is returned. Source code in arcos4py/tools/detect_events.py def run ( self ) -> pd . DataFrame : \"\"\"Method to execute the different steps necessary for tracking. 1. Selects columns. 2. filters data on binary column > 1. 3. Applies dbscan algorithm to every frame. 4. Makes cluster ids unique across frames. 5. Tracks collective events i.e. links cluster ids across frames. 6. Creates final DataFrame. Returns (Dataframe): Dataframe with tracked collective events is returned. \"\"\" filtered_cols = self . _select_necessary_columns ( self . input_data , self . frame_column , self . id_column , self . pos_cols_inputdata , self . bin_meas_column , ) active_data = self . _filter_active ( filtered_cols , self . bin_meas_column ) db_data = self . _run_dbscan ( data = active_data , frame = self . frame_column , clid_frame = self . clidFrame , ) db_data = self . _make_db_id_unique ( db_data , frame = self . frame_column , clid_frame = self . clidFrame , clid = self . clid_column , ) tracked_events = self . _link_clusters_between_frames ( db_data , self . frame_column , self . clid_column ) return_columns = self . _get_export_columns () tracked_events = tracked_events [ return_columns ] if self . clid_column in self . input_data . columns : df_to_merge = self . input_data . drop ( columns = [ self . clid_column ]) else : df_to_merge = self . input_data tracked_events = tracked_events . merge ( df_to_merge , how = \"left\" ) return tracked_events filter_events \u00b6 Module to filter collective events. Examples: >>> from arcos4py.tools import filterCollev >>> f = filterCollev ( data , 'time' , 'collid' ) >>> df = f . filter ( coll_duration : int = 9 , coll_total_size : int = 10 ) filterCollev \u00b6 Select Collective events that last longer than coll_duration and have a larger total size than coll_total_size. Attributes: Name Type Description data Dataframe With detected collective events. frame_column str Indicating the frame column in data. collid_column str Indicating the collective event id column in data. __init__ ( self , data , frame_column = 'time' , collid_column = 'collid' ) special \u00b6 Constructs filterCollev class with Parameters. Parameters: Name Type Description Default data DataFrame With detected collective events. required frame_column str Indicating the frame column in data. 'time' collid_column str Indicating the collective event id column in data. 'collid' Source code in arcos4py/tools/filter_events.py def __init__ ( self , data : pd . DataFrame , frame_column : str = \"time\" , collid_column : str = \"collid\" , ): \"\"\"Constructs filterCollev class with Parameters. Arguments: data (Dataframe): With detected collective events. frame_column (str): Indicating the frame column in data. collid_column (str): Indicating the collective event id column in data. \"\"\" self . data = data self . frame_column = frame_column self . collid_column = collid_column filter ( self , coll_duration = 9 , coll_total_size = 10 ) \u00b6 Filter collective events. Method to filter collective events according to the parameters specified in the object instance. Parameters: Name Type Description Default coll_duration int Minimal duration of collective events to be selected. 9 coll_total_size int Minimal total size of collective events to be selected. 10 Returns (DataFrame): Returns pandas dataframe containing filtered collective events Source code in arcos4py/tools/filter_events.py def filter ( self , coll_duration : int = 9 , coll_total_size : int = 10 ) -> pd . DataFrame : \"\"\"Filter collective events. Method to filter collective events according to the parameters specified in the object instance. Arguments: coll_duration (int): Minimal duration of collective events to be selected. coll_total_size (int): Minimal total size of collective events to be selected. Returns (DataFrame): Returns pandas dataframe containing filtered collective events \"\"\" if self . data . empty : return self . data colev_duration = calcCollevStats () . calculate ( self . data , self . frame_column , self . collid_column ) filtered_df = self . _filter_collev ( self . data , colev_duration , self . collid_column , coll_duration , coll_total_size , ) return filtered_df stats \u00b6 Module containing tools to calculate statistics of collective events. Examples: >>> from arcos4py.tools import calcCollevStats >>> test = calcCollevStats () >>> out = test () . run ( data = data , frame_column = \"frame\" , collid_column = \"collid\" ) calcCollevStats \u00b6 Class to calculate statistics of collective events. __init__ ( self ) special \u00b6 Class to calculate statistics of collective events. Source code in arcos4py/tools/stats.py def __init__ ( self ) -> None : \"\"\"Class to calculate statistics of collective events.\"\"\" pass calculate ( self , data , frame_column , collid_column ) \u00b6 Calculate statistics of collective events. Parameters: Name Type Description Default data DataFrame Containing collective events. required frame_column str Indicating the frame column in data. required collid_column str Indicating the collective event id column in data. required Returns: Type Description DataFrame Dataframe containing collective events stats. Source code in arcos4py/tools/stats.py def calculate ( self , data : pd . DataFrame , frame_column : str , collid_column : str ) -> pd . DataFrame : \"\"\"Calculate statistics of collective events. Arguments: data (DataFrame): Containing collective events. frame_column (str): Indicating the frame column in data. collid_column (str): Indicating the collective event id column in data. Returns: Dataframe containing collective events stats. \"\"\" if data . empty : return data colev_stats = self . _get_collev_duration ( data , frame_column , collid_column ) return colev_stats","title":"Modules"},{"location":"api/#arcos4py.arcos4py","text":"Main Module of arcos4py. This module contains the ARCOS class, which implements most functionallity of arcos4py to prepare data and to detect and track collective events. Examples: >>> from arcos4py import ARCOS >>> ts = ARCOS ( data ,[ \"x\" ], 'time' , 'id' , 'meas' , 'clTrackID' ) >>> ts . interpolate_measurements () >>> ts . clip_meas ( clip_low = 0.001 , clip_high = 0.999 ) >>> ts . bin_measurements ( smoothK int = 3 , biasK = 51 , peakThr = 0.2 , binThr = 0.1 , polyDeg = 1 , biasMet = \"runmed\" ,) >>> events_df = ts . trackCollev ( eps = 1 , minClsz = 1 , nPrev = 1 )","title":"arcos4py"},{"location":"api/#arcos4py.arcos4py.ARCOS","text":"Detects and tracks collective events in a tracked time-series dataset. Requires binarized measurement column, that can be generated with the bin_measurements method. Tracking makes use of the dbscan algorithm, which is applied to every frame and subsequently connects collective events between frames located within eps distance of each other. Attributes: Name Type Description data DataFrame Data of tracked time-series in \"long format\". Can be used to acess modified dataframe at any point. posCols list List containing position column names strings inside data e.g. At least one dimension is required. frame_column str Indicating the frame column in input_data. id_column str Indicating the track id/id column in input_data. measurement_column str Indicating the measurement column in input_data. clid_column str Indicating the column name containing the collective event ids.","title":"ARCOS"},{"location":"api/#arcos4py.arcos4py.ARCOS.__init__","text":"Constructs class with provided arguments. Parameters: Name Type Description Default data DataFrame Input Data of tracked time-series in \"long format\" containing position columns, a measurement and an object ID column. required posCols list List ontaining position column names strings inside data e.g. At least one dimension is required. ['x'] frame_column str Indicating the frame column in input_data. 'time' id_column str Indicating the track id/id column in input_data. 'id' measurement_column str Indicating the measurement column in input_data. 'meas' clid_column str Indicating the column name containing the collective event ids. 'clTrackID' Source code in arcos4py/arcos4py.py def __init__ ( self , data : pd . DataFrame , posCols : list = [ \"x\" ], frame_column : str = 'time' , id_column : str = 'id' , measurement_column : str = 'meas' , clid_column : str = 'clTrackID' , ) -> None : \"\"\"Constructs class with provided arguments. Arguments: data (DataFrame): Input Data of tracked time-series in \"long format\" containing position columns, a measurement and an object ID column. posCols (list): List ontaining position column names strings inside data e.g. At least one dimension is required. frame_column (str): Indicating the frame column in input_data. id_column (str): Indicating the track id/id column in input_data. measurement_column (str): Indicating the measurement column in input_data. clid_column (str): Indicating the column name containing the collective event ids. \"\"\" self . data = data self . posCols = posCols self . frame_column = frame_column self . id_column = id_column self . measurement_column = measurement_column self . clid_column = clid_column self . data_binarized : pd . DataFrame = None self . tracked_events : pd . DataFrame = None self . bin_col : Union [ str , None ] = None # to check if no measurement was provided assign None self . data = self . data . sort_values ( by = [ self . frame_column , self . id_column ]) self . _check_col () if self . measurement_column is not None : self . resc_col = f \" { self . measurement_column } .resc\" self . bin_col = f \" { self . measurement_column } .bin\"","title":"__init__()"},{"location":"api/#arcos4py.arcos4py.ARCOS.__repr__","text":"Set __repr___ to return self.data. Source code in arcos4py/arcos4py.py def __repr__ ( self ) -> pd . DataFrame : \"\"\"Set __repr___ to return self.data.\"\"\" return repr ( self . data )","title":"__repr__()"},{"location":"api/#arcos4py.arcos4py.ARCOS.bin_measurements","text":"Smooth, de-trend, and binarise the input data. First a short-term median filter with size smoothK is applied to remove fast noise from the time series. If the de-trending method is set to \"none\", smoothing is applied on globally rescaled time series. The subsequent de-trending can be performed with a long-term median filter with the size biasK {biasMet = \"runmed\"} or by fitting a polynomial of degree polyDeg {biasMet = \"lm\"}. After de-trending, if the global difference between min/max is greater than the threshold the signal is rescaled to the (0,1) range. The final signal is binarised using the binThr threshold Parameters: Name Type Description Default smoothK int Size of the short-term median smoothing filter. 3 biasK int Size of the long-term de-trending median filter 51 peakThr float Threshold for rescaling of the de-trended signal. 0.2 binThr float Threshold for binary classification. 0.1 polyDeg int Sets the degree of the polynomial for lm fitting. 1 biasMet str De-trending method, one of ['runmed', 'lm', 'none']. 'runmed' Returns: Type Description DataFrame DataFrame with detrended/smoothed and binarized measurement column. Source code in arcos4py/arcos4py.py def bin_measurements ( self , smoothK : int = 3 , biasK : int = 51 , peakThr : float = 0.2 , binThr : float = 0.1 , polyDeg : int = 1 , biasMet : str = \"runmed\" , ) -> pd . DataFrame : r \"\"\"Smooth, de-trend, and binarise the input data. First a short-term median filter with size smoothK is applied to remove fast noise from the time series. If the de-trending method is set to \"none\", smoothing is applied on globally rescaled time series. The subsequent de-trending can be performed with a long-term median filter with the size biasK {biasMet = \"runmed\"} or by fitting a polynomial of degree polyDeg {biasMet = \"lm\"}. After de-trending, if the global difference between min/max is greater than the threshold the signal is rescaled to the (0,1) range. The final signal is binarised using the binThr threshold Arguments: smoothK (int): Size of the short-term median smoothing filter. biasK (int): Size of the long-term de-trending median filter peakThr (float): Threshold for rescaling of the de-trended signal. binThr (float): Threshold for binary classification. polyDeg (int): Sets the degree of the polynomial for lm fitting. biasMet (str): De-trending method, one of ['runmed', 'lm', 'none']. Returns: DataFrame with detrended/smoothed and binarized measurement column. \"\"\" self . data = binData ( self . data , smoothK , biasK , peakThr , binThr , polyDeg , biasMet , colMeas = self . measurement_column , colGroup = self . id_column , ) . run () return self . data","title":"bin_measurements()"},{"location":"api/#arcos4py.arcos4py.ARCOS.clip_meas","text":"Clip measurement column to upper and lower quantiles defined in clip_low and clip_high. Parameters: Name Type Description Default clip_low float Lower clipping boundary (quantile). 0.001 clip_high float Upper clipping boundary (quantile). 0.999 Returns: Type Description DataFrame Dataframe with in place clipped measurement column. Source code in arcos4py/arcos4py.py def clip_meas ( self , clip_low : float = 0.001 , clip_high : float = 0.999 ) -> pd . DataFrame : \"\"\"Clip measurement column to upper and lower quantiles defined in clip_low and clip_high. Arguments: clip_low (float): Lower clipping boundary (quantile). clip_high (float): Upper clipping boundary (quantile). Returns: Dataframe with in place clipped measurement column. \"\"\" meas_column = self . data [ self . measurement_column ] . to_numpy () meas_clipped = clipMeas ( meas_column ) . clip ( clip_low , clip_high ) self . data [ self . measurement_column ] = meas_clipped return self . data","title":"clip_meas()"},{"location":"api/#arcos4py.arcos4py.ARCOS.interpolate_measurements","text":"Interpolates NaN's in place in measurement column. Returns: Type Description DataFrame Dataframe with interpolated measurement column. Source code in arcos4py/arcos4py.py def interpolate_measurements ( self ) -> pd . DataFrame : \"\"\"Interpolates NaN's in place in measurement column. Returns: Dataframe with interpolated measurement column. \"\"\" meas_interp = interpolation ( self . data ) . interpolate () self . data = meas_interp return self . data","title":"interpolate_measurements()"},{"location":"api/#arcos4py.arcos4py.ARCOS.trackCollev","text":"Requires binarized measurement column. Makes use of the dbscan algorithm, applies this to every timeframe and subsequently connects collective events between frames located within eps distance of each other. Parameters: Name Type Description Default eps float The maximum distance between two samples for one to be considered as in the neighbourhood of the other. This is not a maximum bound on the distances of points within a cluster. Value is also used to connect collective events across multiple frames. 1 minClsz int The minimum size for a cluster to be identified as a collective event 1 nPrev int Number of previous frames the tracking algorithm looks back to connect collective events 1 Returns: Type Description DataFrame DataFrame with detected collective events across time. Source code in arcos4py/arcos4py.py def trackCollev ( self , eps : float = 1 , minClsz : int = 1 , nPrev : int = 1 ) -> pd . DataFrame : \"\"\"Requires binarized measurement column. Makes use of the dbscan algorithm, applies this to every timeframe and subsequently connects collective events between frames located within eps distance of each other. Arguments: eps (float): The maximum distance between two samples for one to be considered as in the neighbourhood of the other. This is not a maximum bound on the distances of points within a cluster. Value is also used to connect collective events across multiple frames. minClsz (str): The minimum size for a cluster to be identified as a collective event nPrev (int): Number of previous frames the tracking algorithm looks back to connect collective events Returns: DataFrame with detected collective events across time. \"\"\" self . data = detectCollev ( self . data , eps = eps , minClSz = minClsz , nPrev = nPrev , posCols = self . posCols , frame_column = self . frame_column , id_column = self . id_column , bin_meas_column = self . bin_col , clid_column = self . clid_column , ) . run () return self . data","title":"trackCollev()"},{"location":"api/#arcos4py.plotting","text":"Tools for plotting collective events.","title":"plotting"},{"location":"api/#arcos4py.plotting.plotting","text":"Module to plot different metrics generated by arcos4py functions. Examples: >>> from arcos4py.plotting import plotOriginalDetrended >>> plot = arcosPlots ( data , 'time' , 'meas' , 'detrended' , 'id' ) >>> plot . plot_detrended ()","title":"plotting"},{"location":"api/#arcos4py.plotting.plotting.dataPlots","text":"Plot different metrics of input data. Attributes: Name Type Description data Dataframe containing ARCOS data. frame str name of frame column in data. measurement str name of measurement column in data. id str name of track id column.","title":"dataPlots"},{"location":"api/#arcos4py.plotting.plotting.dataPlots.__init__","text":"Plot different metrics such as histogram, position-t and density. Parameters: Name Type Description Default data pd.DataFrame containing ARCOS data. required frame str name of frame column in data. required measurement str name of measurement column in data. required id str name of track id column. required Source code in arcos4py/plotting/plotting.py def __init__ ( self , data : pd . DataFrame , frame : str , measurement : str , id : str ): \"\"\"Plot different metrics such as histogram, position-t and density. Arguments: data (Dataframe): containing ARCOS data. frame (str): name of frame column in data. measurement (str): name of measurement column in data. id (str): name of track id column. \"\"\" self . data = data self . id = id self . frame = frame","title":"__init__()"},{"location":"api/#arcos4py.plotting.plotting.dataPlots.density_plot","text":"Density plot of measurement. Uses Seaborn distplot to plot measurement density. Parameters: Name Type Description Default measurement_col str name of measurement column. required *args Any arguments passed on to seaborn histplot function. () **kwargs Any keyword arguments passed on to seaborn histplot function. {} Source code in arcos4py/plotting/plotting.py def density_plot ( self , measurement_col : str , * args , ** kwargs ): \"\"\"Density plot of measurement. Uses Seaborn distplot to plot measurement density. Arguments: measurement_col (str): name of measurement column. *args (Any): arguments passed on to seaborn histplot function. **kwargs (Any): keyword arguments passed on to seaborn histplot function. \"\"\" sns . displot ( self . data [ measurement_col ], kind = \"kde\" , palette = \"pastel\" , label = measurement_col , * args , ** kwargs ) # Plot formatting plt . legend ( prop = { 'size' : 10 }) plt . title ( 'Density Plot of Measurement' ) plt . xlabel ( 'Measurement' ) plt . ylabel ( 'Density' ) plt . show ()","title":"density_plot()"},{"location":"api/#arcos4py.plotting.plotting.dataPlots.histogram","text":"Histogram of tracklenght. Uses seaborn histplot function to plot tracklenght histogram. Parameters: Name Type Description Default bins str number or width of bins in histogram 'auto' *args Any arguments passed on to seaborn histplot function. () **kwargs Any keyword arguments passed on to seaborn histplot function. {} Source code in arcos4py/plotting/plotting.py def histogram ( self , bins : str = 'auto' , * args , ** kwargs ): \"\"\"Histogram of tracklenght. Uses seaborn histplot function to plot tracklenght histogram. Arguments: bins (str): number or width of bins in histogram *args (Any): arguments passed on to seaborn histplot function. **kwargs (Any): keyword arguments passed on to seaborn histplot function. \"\"\" # Draw histogram track_length = self . data . groupby ( self . id ) . size () sns . histplot ( track_length , label = \"Track Length\" , bins = bins , * args , ** kwargs ) # Plot formatting plt . title ( 'Track length Histogram' ) plt . xlabel ( 'Track Length' ) plt . ylabel ( 'Count' ) plt . show ()","title":"histogram()"},{"location":"api/#arcos4py.plotting.plotting.dataPlots.position_t_plot","text":"Plots X and Y over T to visualize tracklength. Parameters: Name Type Description Default posCol set[str] containing names of position columns in data. {'x'} n int number of samples to plot. 20 Source code in arcos4py/plotting/plotting.py def position_t_plot ( self , posCol : set [ str ] = { 'x' }, n : int = 20 ): \"\"\"Plots X and Y over T to visualize tracklength. Arguments: posCol (set): containing names of position columns in data. n (int): number of samples to plot. \"\"\" sample = pd . Series ( self . data [ self . id ] . unique ()) . sample ( n ) pd_from_r_df = self . data . loc [ self . data [ self . id ] . isin ( sample )] fig , axes = plt . subplots ( 1 , len ( posCol ), figsize = ( 6 , 3 )) for label , df in pd_from_r_df . groupby ( self . id ): for index , value in enumerate ( posCol ): df . plot ( x = self . frame , y = value , ax = axes [ index ], legend = None ) for index , value in enumerate ( posCol ): axes [ index ] . set_title ( value ) plt . show ()","title":"position_t_plot()"},{"location":"api/#arcos4py.plotting.plotting.plotOriginalDetrended","text":"Plot different detrended vs original data. Attributes: Name Type Description data Dataframe containing ARCOS data. frame str name of frame column in data. measurement str name of measurement column in data. detrended str name of detrended column with detrended data. id str name of track id column.","title":"plotOriginalDetrended"},{"location":"api/#arcos4py.plotting.plotting.plotOriginalDetrended.__init__","text":"Plot detrended vs original data. Parameters: Name Type Description Default data pd.DataFrame containing ARCOS data. required frame str name of frame column in data. required measurement str name of measurement column in data. required detrended str name of detrended column with detrended data. required id str name of track id column. required Source code in arcos4py/plotting/plotting.py def __init__ ( self , data : pd . DataFrame , frame : str , measurement : str , detrended : str , id : str ): \"\"\"Plot detrended vs original data. Arguments: data (Dataframe): containing ARCOS data. frame (str): name of frame column in data. measurement (str): name of measurement column in data. detrended (str): name of detrended column with detrended data. id (str): name of track id column. \"\"\" self . data = data self . measurement = measurement self . detrended = detrended self . id = id self . frame = frame","title":"__init__()"},{"location":"api/#arcos4py.plotting.plotting.plotOriginalDetrended.plot_detrended","text":"Method to plot detrended vs original data. Parameters: Name Type Description Default n_samples int Number of tracks to plot. 25 subplots tuple Number of subplots, should be approx. one per sample. (5, 5) plotsize tuple Size of generated plot. (20, 10) Returns: Type Description matplotlib.axes.Axes Matplotlib figure of detrended vs original data. Source code in arcos4py/plotting/plotting.py def plot_detrended ( self , n_samples : int = 25 , subplots : tuple = ( 5 , 5 ), plotsize : tuple = ( 20 , 10 ) ) -> matplotlib . axes . Axes : \"\"\"Method to plot detrended vs original data. Arguments: n_samples (int): Number of tracks to plot. subplots (tuple): Number of subplots, should be approx. one per sample. plotsize (tuple): Size of generated plot. Returns: Matplotlib figure of detrended vs original data. \"\"\" vals = np . random . choice ( self . data [ self . id ] . unique (), n_samples , replace = False ) self . data = self . data . set_index ( self . id ) . loc [ vals ] . reset_index () grouped = self . data . groupby ( self . id ) ncols = subplots [ 0 ] nrows = subplots [ 1 ] fig , axes = plt . subplots ( nrows = nrows , ncols = ncols , figsize = plotsize , sharey = True ) for ( key , ax ) in zip ( grouped . groups . keys (), axes . flatten ()): grouped . get_group ( key ) . plot ( x = self . frame , y = [ self . measurement , self . detrended ], ax = ax ) ax . get_legend () . remove () handles , labels = ax . get_legend_handles_labels () fig . legend ( handles , labels , loc = \"lower right\" ) return fig","title":"plot_detrended()"},{"location":"api/#arcos4py.plotting.plotting.statsPlots","text":"Plot data generated by the stats module. Attributes: Name Type Description data DataFrame containing ARCOS stats data.","title":"statsPlots"},{"location":"api/#arcos4py.plotting.plotting.statsPlots.__init__","text":"Plot detrended vs original data. Parameters: Name Type Description Default data pd.DataFrame containing ARCOS stats data. required Source code in arcos4py/plotting/plotting.py def __init__ ( self , data : pd . DataFrame ): \"\"\"Plot detrended vs original data. Arguments: data (DataFrame): containing ARCOS stats data. \"\"\" self . data = data","title":"__init__()"},{"location":"api/#arcos4py.plotting.plotting.statsPlots.plot_events_duration","text":"Scatterplot of collective event duration. Parameters: Name Type Description Default total_size str name of total size column. required duration str , name of column with collective event duration. required point_size int scatterplot point size. 40 *args Any Arguments passed on to seaborn scatterplot function. () **kwargs Any Keyword arguments passed on to seaborn scatterplot function. {} Source code in arcos4py/plotting/plotting.py def plot_events_duration ( self , total_size : str , duration : str , point_size : int = 40 , * args , ** kwargs ): \"\"\"Scatterplot of collective event duration. Arguments: total_size (str): name of total size column. duration (str):, name of column with collective event duration. point_size (int): scatterplot point size. *args (Any): Arguments passed on to seaborn scatterplot function. **kwargs (Any): Keyword arguments passed on to seaborn scatterplot function. \"\"\" plot = sns . scatterplot ( x = self . data [ total_size ], y = self . data [ duration ], s = point_size , * args , ** kwargs ) return plot","title":"plot_events_duration()"},{"location":"api/#arcos4py.tools","text":"Tools for detecting collective events.","title":"tools"},{"location":"api/#arcos4py.tools.binarize_detrend","text":"Module containing binarization and detrending classes. Examples: >>> from arcos4py.tools import binData >>> binarizer = binData ( x = data , biasMet = \"lm\" , colMeas = \"ERK_KTR\" , colGroup = \"trackID\" , polyDeg = 1 ) >>> data_rescaled = binarizer . run ()","title":"binarize_detrend"},{"location":"api/#arcos4py.tools.binarize_detrend.binData","text":"Smooth, de-trend, and binarise the input data. First a short-term median filter with size smoothK is applied to remove fast noise from the time series. If the de-trending method is set to \"none\", smoothing is applied on globally rescaled time series. The subsequent de-trending can be performed with a long-term median filter with the size biasK {biasMet = \"runmed\"} or by fitting a polynomial of degree polyDeg {biasMet = \"lm\"}. After de-trending, if the global difference between min/max is greater than the threshold the signal is rescaled to the (0,1) range. The final signal is binarised using the binThr threshold.","title":"binData"},{"location":"api/#arcos4py.tools.binarize_detrend.binData.__init__","text":"Smooth, de-trend, and binarise the input data. Parameters: Name Type Description Default x DataFrame The time-series data for smoothing. required smoothK int Size of the short-term median smoothing filter. 3 biasK int Size of the long-term de-trending median filter. 51 peakThr float Threshold for rescaling of the de-trended signal. 0.2 binThr float Threshold for binarizing the de-trended signal. 0.1 polyDeg int Sets the degree of the polynomial for lm fitting. 1 biasMet str De-trending method, one of ['runmed', 'lm', 'none']. 'runmed' colMeas str Measurement column in x. 'meas' colGroup str Track id column in x. 'id' Source code in arcos4py/tools/binarize_detrend.py def __init__ ( self , x : pd . DataFrame , smoothK : int = 3 , biasK : int = 51 , peakThr : float = 0.2 , binThr : float = 0.1 , polyDeg : int = 1 , biasMet : str = \"runmed\" , colMeas : str = \"meas\" , colGroup : str = \"id\" , ) -> None : \"\"\"Smooth, de-trend, and binarise the input data. Arguments: x (DataFrame): The time-series data for smoothing. smoothK (int): Size of the short-term median smoothing filter. biasK (int): Size of the long-term de-trending median filter. peakThr (float): Threshold for rescaling of the de-trended signal. binThr (float): Threshold for binarizing the de-trended signal. polyDeg (int): Sets the degree of the polynomial for lm fitting. biasMet (str): De-trending method, one of ['runmed', 'lm', 'none']. colMeas (str): Measurement column in x. colGroup (str): Track id column in x. \"\"\" super () . __init__ ( x , smoothK , biasK , peakThr , polyDeg , biasMet , colMeas , colGroup ) self . binThr = binThr self . col_resc = f \" { self . colMeas } .resc\" self . col_bin = f \" { self . colMeas } .bin\"","title":"__init__()"},{"location":"api/#arcos4py.tools.binarize_detrend.binData.run","text":"Runs binarization and detrending. If the bias Method is 'none', first it rescales the data to between [0,1], then local smoothing is applied to the measurement by groups, followed by binarization. If biasMeth is one of ['lm', 'runmed'], first the data is detrended locally with a median filter and then detrended globally, for 'lm' with a linear model and for 'runmed' with a median filter. Followed by binarization of the data. Returns (DataFrame): Dataframe containing Binarized data, rescaled data and the original columns Source code in arcos4py/tools/binarize_detrend.py def run ( self ) -> pd . DataFrame : \"\"\"Runs binarization and detrending. If the bias Method is 'none', first it rescales the data to between [0,1], then local smoothing is applied to the measurement by groups, followed by binarization. If biasMeth is one of ['lm', 'runmed'], first the data is detrended locally with a median filter and then detrended globally, for 'lm' with a linear model and for 'runmed' with a median filter. Followed by binarization of the data. Returns (DataFrame): Dataframe containing Binarized data, rescaled data and the original columns \"\"\" if self . biasMet == \"none\" : rescaled_data = self . _rescale_data ( self . x ) detrended_data = self . detrend ( rescaled_data , self . colGroup , self . col_resc ) binarized_data = self . _bin_data ( detrended_data ) else : detrended_data = self . detrend ( self . x , self . colGroup , self . colMeas ) binarized_data = self . _bin_data ( detrended_data ) return binarized_data","title":"run()"},{"location":"api/#arcos4py.tools.binarize_detrend.detrender","text":"Smooth and de-trend input data. First, a short-term median filter with size smoothK is applied to remove fast noise from the time series. The subsequent de-trending can be performed with a long-term median filter with the size biasK {biasMet = \"runmed\"} or by fitting a polynomial of degree polyDeg {biasMet = \"lm\"}. Attributes: Name Type Description x DataFrame Time series data for smoothing. smoothK int Representing the size of the short-term median smoothing filter. biasK int Representing the size of the long-term de-trending median filter. peakThr float Threshold for rescaling of the de-trended signal. polyDeg int Sets the degree of the polynomial for lm fitting. biasMet str Indicating de-trending method, one of ['runmed', 'lm', 'none']. colMeas str Name of measurement column in x. colGroup str Name of id column in x.","title":"detrender"},{"location":"api/#arcos4py.tools.binarize_detrend.detrender.__init__","text":"Smooth and de-trend input data. Parameters: Name Type Description Default x DataFrame Time series data for smoothing. required smoothK int Representing the size of the short-term median smoothing filter. 3 biasK int Representing the size of the long-term de-trending median filter. 51 peakThr float Threshold for rescaling of the de-trended signal. 0.2 polyDeg int Sets the degree of the polynomial for lm fitting. 1 biasMet str Indicating de-trending method, one of ['runmed', 'lm', 'none']. 'runmed' colMeas str Name of measurement column in x. 'meas' colGroup str Name of id column in x. 'id' Source code in arcos4py/tools/binarize_detrend.py def __init__ ( self , x : pd . DataFrame , smoothK : int = 3 , biasK : int = 51 , peakThr : float = 0.2 , polyDeg : int = 1 , biasMet : str = \"runmed\" , colMeas : str = \"meas\" , colGroup : str = \"id\" , ) -> None : \"\"\"Smooth and de-trend input data. Arguments: x (DataFrame): Time series data for smoothing. smoothK (int): Representing the size of the short-term median smoothing filter. biasK (int): Representing the size of the long-term de-trending median filter. peakThr (float): Threshold for rescaling of the de-trended signal. polyDeg (int): Sets the degree of the polynomial for lm fitting. biasMet (str): Indicating de-trending method, one of ['runmed', 'lm', 'none']. colMeas (str): Name of measurement column in x. colGroup (str): Name of id column in x. \"\"\" # check if biasmethod contains one of these three types biasMet_types = [ \"runmed\" , \"lm\" , \"none\" ] if biasMet not in biasMet_types : raise ValueError ( f \"Invalid bias method. Expected one of: { biasMet_types } \" ) self . x = x self . smoothK = smoothK self . biasK = biasK self . peakThr = peakThr self . polyDeg = polyDeg self . biasMet = biasMet self . colMeas = colMeas self . colGroup = colGroup","title":"__init__()"},{"location":"api/#arcos4py.tools.binarize_detrend.detrender.detrend","text":"Run detrinding on input data. The method applies detrending to each group defined in group_col and outputs it into the resc_column. Returns (DataFrame): Dataframe containing rescaled column. Source code in arcos4py/tools/binarize_detrend.py def detrend ( self , data : pd . DataFrame , group_col : str , resc_col ) -> pd . DataFrame : \"\"\"Run detrinding on input data. The method applies detrending to each group defined in group_col and outputs it into the resc_column. Returns (DataFrame): Dataframe containing rescaled column. \"\"\" data_gp = data . groupby ([ group_col ]) data = data_gp . apply ( lambda y : self . _run_detrend ( y , resc_col )) return data","title":"detrend()"},{"location":"api/#arcos4py.tools.cleandata","text":"Module containing clipping and interpolation classes. Examples: >>> # Interpolation >>> from arcos4py.tools import interpolation >>> a = interpolation ( data ) >>> data_interp = a . interpolate () >>> # clipping >>> from arcos4py.tools import clipMeas >>> a = clipMeas ( data ) >>> data_clipped = a . clip ( 0.001 , 0.999 )","title":"cleandata"},{"location":"api/#arcos4py.tools.cleandata.clipMeas","text":"Clip input array.","title":"clipMeas"},{"location":"api/#arcos4py.tools.cleandata.clipMeas.__init__","text":"Clips array to quantilles. Parameters: Name Type Description Default data ndarray To be clipped. required Source code in arcos4py/tools/cleandata.py def __init__ ( self , data : np . ndarray ) -> None : \"\"\"Clips array to quantilles. Arguments: data (ndarray): To be clipped. \"\"\" self . data = data","title":"__init__()"},{"location":"api/#arcos4py.tools.cleandata.clipMeas.clip","text":"Clip input array to upper and lower quantiles defined in clip_low and clip_high. Parameters: Name Type Description Default clip_low float Lower clipping boundary (quantile). 0.001 clip_high float Upper clipping boundry (quantille). 0.999 Returns (ndarray): A clipped array of the input data. Source code in arcos4py/tools/cleandata.py def clip ( self , clip_low : float = 0.001 , clip_high : float = 0.999 ) -> np . ndarray : \"\"\"Clip input array to upper and lower quantiles defined in clip_low and clip_high. Arguments: clip_low (float): Lower clipping boundary (quantile). clip_high (float): Upper clipping boundry (quantille). Returns (ndarray): A clipped array of the input data. \"\"\" low , high = self . _calculate_percentile ( self . data , clip_low , clip_high ) out = self . data . clip ( low , high ) return out","title":"clip()"},{"location":"api/#arcos4py.tools.cleandata.interpolation","text":"Interpolate nan values in a numpy array. Attributes: Name Type Description data DataFrame Where NaN should be replaced with interpolated values.","title":"interpolation"},{"location":"api/#arcos4py.tools.cleandata.interpolation.__init__","text":"Interpolate nan values in a pandas dataframe. Uses pandas.interpolate with liner interpolation. Parameters: Name Type Description Default data DataFrame Where NaN should be replaced with interpolated values. required Source code in arcos4py/tools/cleandata.py def __init__ ( self , data : pd . DataFrame ): \"\"\"Interpolate nan values in a pandas dataframe. Uses pandas.interpolate with liner interpolation. Arguments: data (DataFrame): Where NaN should be replaced with interpolated values. \"\"\" self . data = data","title":"__init__()"},{"location":"api/#arcos4py.tools.cleandata.interpolation.interpolate","text":"Interpolate nan and missing values. Returns (DataFrame): Interpolated input data. Source code in arcos4py/tools/cleandata.py def interpolate ( self ) -> pd . DataFrame : \"\"\"Interpolate nan and missing values. Returns (DataFrame): Interpolated input data. \"\"\" self . data = self . data . interpolate ( axis = 0 ) return self . data","title":"interpolate()"},{"location":"api/#arcos4py.tools.detect_events","text":"Module to track and detect collective events. Examples: >>> from arcos4py.tools import detectCollev >>> ts = detectCollev ( data ) >>> events_df = ts . run ()","title":"detect_events"},{"location":"api/#arcos4py.tools.detect_events.detectCollev","text":"Identifies and tracks collective signalling events. Requires binarized measurement column. Makes use of the dbscan algorithm, applies this to every timeframe and subsequently connects collective events between frames located within eps distance of each other. Attributes: Name Type Description input_data DataFrame Input data to be processed. Must contain a binarized measurement column. eps float The maximum distance between two samples for one to be considered as in the neighbourhood of the other. This is not a maximum bound on the distances of points within a cluster. Value is also used to connect collective events across multiple frames. minClSz int Minimum size for a cluster to be identified as a collective event. nPrev int Number of previous frames the tracking algorithm looks back to connect collective events. posCols list List of position columns contained in the data. Must at least contain one frame_column str Indicating the frame column in input_data. id_column str Indicating the track id/id column in input_data. bin_meas_column str Indicating the bin_meas_column in input_data or None. clid_column str Indicating the column name containing the ids of collective events.","title":"detectCollev"},{"location":"api/#arcos4py.tools.detect_events.detectCollev.__init__","text":"Constructs class with input parameters. Parameters: Name Type Description Default input_data DataFrame Input data to be processed. Must contain a binarized measurement column. required eps float The maximum distance between two samples for one to be considered as in the neighbourhood of the other. This is not a maximum bound on the distances of points within a cluster. Value is also used to connect collective events across multiple frames. 1 minClSz int Minimum size for a cluster to be identified as a collective event. 1 nPrev int Number of previous frames the tracking algorithm looks back to connect collective events. 1 posCols list List of position columns contained in the data. Must at least contain one ['x'] frame_column str Indicating the frame column in input_data. 'time' id_column str Indicating the track id/id column in input_data. 'id' bin_meas_column Optional[str] Indicating the bin_meas_column in input_data or None. 'meas' clid_column str Indicating the column name containing the ids of collective events. 'clTrackID' Source code in arcos4py/tools/detect_events.py def __init__ ( self , input_data : pd . DataFrame , eps : float = 1 , minClSz : int = 1 , nPrev : int = 1 , posCols : list = [ \"x\" ], frame_column : str = 'time' , id_column : str = 'id' , bin_meas_column : Union [ str , None ] = 'meas' , clid_column : str = 'clTrackID' , ) -> None : \"\"\"Constructs class with input parameters. Arguments: input_data (DataFrame): Input data to be processed. Must contain a binarized measurement column. eps (float): The maximum distance between two samples for one to be considered as in the neighbourhood of the other. This is not a maximum bound on the distances of points within a cluster. Value is also used to connect collective events across multiple frames. minClSz (int): Minimum size for a cluster to be identified as a collective event. nPrev (int): Number of previous frames the tracking algorithm looks back to connect collective events. posCols (list): List of position columns contained in the data. Must at least contain one frame_column (str): Indicating the frame column in input_data. id_column (str): Indicating the track id/id column in input_data. bin_meas_column (str): Indicating the bin_meas_column in input_data or None. clid_column (str): Indicating the column name containing the ids of collective events. \"\"\" # assign some variables passed in as arguments to the object self . input_data = input_data self . eps = eps self . minClSz = minClSz self . nPrev = nPrev self . frame_column = frame_column self . id_column = id_column self . bin_meas_column = bin_meas_column self . clid_column = clid_column self . posCols = posCols self . columns_input = self . input_data . columns self . clidFrame = f ' { clid_column } .frame' self . pos_cols_inputdata = [ col for col in self . posCols if col in self . columns_input ] # run input checks self . _run_input_checks ()","title":"__init__()"},{"location":"api/#arcos4py.tools.detect_events.detectCollev.run","text":"Method to execute the different steps necessary for tracking. Selects columns. filters data on binary column > 1. Applies dbscan algorithm to every frame. Makes cluster ids unique across frames. Tracks collective events i.e. links cluster ids across frames. Creates final DataFrame. Returns (Dataframe): Dataframe with tracked collective events is returned. Source code in arcos4py/tools/detect_events.py def run ( self ) -> pd . DataFrame : \"\"\"Method to execute the different steps necessary for tracking. 1. Selects columns. 2. filters data on binary column > 1. 3. Applies dbscan algorithm to every frame. 4. Makes cluster ids unique across frames. 5. Tracks collective events i.e. links cluster ids across frames. 6. Creates final DataFrame. Returns (Dataframe): Dataframe with tracked collective events is returned. \"\"\" filtered_cols = self . _select_necessary_columns ( self . input_data , self . frame_column , self . id_column , self . pos_cols_inputdata , self . bin_meas_column , ) active_data = self . _filter_active ( filtered_cols , self . bin_meas_column ) db_data = self . _run_dbscan ( data = active_data , frame = self . frame_column , clid_frame = self . clidFrame , ) db_data = self . _make_db_id_unique ( db_data , frame = self . frame_column , clid_frame = self . clidFrame , clid = self . clid_column , ) tracked_events = self . _link_clusters_between_frames ( db_data , self . frame_column , self . clid_column ) return_columns = self . _get_export_columns () tracked_events = tracked_events [ return_columns ] if self . clid_column in self . input_data . columns : df_to_merge = self . input_data . drop ( columns = [ self . clid_column ]) else : df_to_merge = self . input_data tracked_events = tracked_events . merge ( df_to_merge , how = \"left\" ) return tracked_events","title":"run()"},{"location":"api/#arcos4py.tools.filter_events","text":"Module to filter collective events. Examples: >>> from arcos4py.tools import filterCollev >>> f = filterCollev ( data , 'time' , 'collid' ) >>> df = f . filter ( coll_duration : int = 9 , coll_total_size : int = 10 )","title":"filter_events"},{"location":"api/#arcos4py.tools.filter_events.filterCollev","text":"Select Collective events that last longer than coll_duration and have a larger total size than coll_total_size. Attributes: Name Type Description data Dataframe With detected collective events. frame_column str Indicating the frame column in data. collid_column str Indicating the collective event id column in data.","title":"filterCollev"},{"location":"api/#arcos4py.tools.filter_events.filterCollev.__init__","text":"Constructs filterCollev class with Parameters. Parameters: Name Type Description Default data DataFrame With detected collective events. required frame_column str Indicating the frame column in data. 'time' collid_column str Indicating the collective event id column in data. 'collid' Source code in arcos4py/tools/filter_events.py def __init__ ( self , data : pd . DataFrame , frame_column : str = \"time\" , collid_column : str = \"collid\" , ): \"\"\"Constructs filterCollev class with Parameters. Arguments: data (Dataframe): With detected collective events. frame_column (str): Indicating the frame column in data. collid_column (str): Indicating the collective event id column in data. \"\"\" self . data = data self . frame_column = frame_column self . collid_column = collid_column","title":"__init__()"},{"location":"api/#arcos4py.tools.filter_events.filterCollev.filter","text":"Filter collective events. Method to filter collective events according to the parameters specified in the object instance. Parameters: Name Type Description Default coll_duration int Minimal duration of collective events to be selected. 9 coll_total_size int Minimal total size of collective events to be selected. 10 Returns (DataFrame): Returns pandas dataframe containing filtered collective events Source code in arcos4py/tools/filter_events.py def filter ( self , coll_duration : int = 9 , coll_total_size : int = 10 ) -> pd . DataFrame : \"\"\"Filter collective events. Method to filter collective events according to the parameters specified in the object instance. Arguments: coll_duration (int): Minimal duration of collective events to be selected. coll_total_size (int): Minimal total size of collective events to be selected. Returns (DataFrame): Returns pandas dataframe containing filtered collective events \"\"\" if self . data . empty : return self . data colev_duration = calcCollevStats () . calculate ( self . data , self . frame_column , self . collid_column ) filtered_df = self . _filter_collev ( self . data , colev_duration , self . collid_column , coll_duration , coll_total_size , ) return filtered_df","title":"filter()"},{"location":"api/#arcos4py.tools.stats","text":"Module containing tools to calculate statistics of collective events. Examples: >>> from arcos4py.tools import calcCollevStats >>> test = calcCollevStats () >>> out = test () . run ( data = data , frame_column = \"frame\" , collid_column = \"collid\" )","title":"stats"},{"location":"api/#arcos4py.tools.stats.calcCollevStats","text":"Class to calculate statistics of collective events.","title":"calcCollevStats"},{"location":"api/#arcos4py.tools.stats.calcCollevStats.__init__","text":"Class to calculate statistics of collective events. Source code in arcos4py/tools/stats.py def __init__ ( self ) -> None : \"\"\"Class to calculate statistics of collective events.\"\"\" pass","title":"__init__()"},{"location":"api/#arcos4py.tools.stats.calcCollevStats.calculate","text":"Calculate statistics of collective events. Parameters: Name Type Description Default data DataFrame Containing collective events. required frame_column str Indicating the frame column in data. required collid_column str Indicating the collective event id column in data. required Returns: Type Description DataFrame Dataframe containing collective events stats. Source code in arcos4py/tools/stats.py def calculate ( self , data : pd . DataFrame , frame_column : str , collid_column : str ) -> pd . DataFrame : \"\"\"Calculate statistics of collective events. Arguments: data (DataFrame): Containing collective events. frame_column (str): Indicating the frame column in data. collid_column (str): Indicating the collective event id column in data. Returns: Dataframe containing collective events stats. \"\"\" if data . empty : return data colev_stats = self . _get_collev_duration ( data , frame_column , collid_column ) return colev_stats","title":"calculate()"},{"location":"changelog/","text":"Changelog \u00b6 [0.1.1] - 2022-04-04 \u00b6 Added \u00b6 More plotting functionallity to the plotting module. Measurment density plot Tracklength histogram Position/T plot Collective event statistcs plot Changed \u00b6 Interpolation class in tools now uses pandas.interpolate to interpolate missing values. Interpolation now interpolates all values in all columns of the dataframe. Improved usage section in the documentation. Fixed \u00b6 Bug in trackCollev class that would lead to an error message in some cases. Spelling in docstrings. [0.1.0] - 2022-03-26 \u00b6 Added \u00b6 First release on PyPI.","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#011---2022-04-04","text":"","title":"[0.1.1] - 2022-04-04"},{"location":"changelog/#added","text":"More plotting functionallity to the plotting module. Measurment density plot Tracklength histogram Position/T plot Collective event statistcs plot","title":"Added"},{"location":"changelog/#changed","text":"Interpolation class in tools now uses pandas.interpolate to interpolate missing values. Interpolation now interpolates all values in all columns of the dataframe. Improved usage section in the documentation.","title":"Changed"},{"location":"changelog/#fixed","text":"Bug in trackCollev class that would lead to an error message in some cases. Spelling in docstrings.","title":"Fixed"},{"location":"changelog/#010---2022-03-26","text":"","title":"[0.1.0] - 2022-03-26"},{"location":"changelog/#added_1","text":"First release on PyPI.","title":"Added"},{"location":"contributing/","text":"Contributing \u00b6 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions \u00b6 Report Bugs \u00b6 Report bugs at https://github.com/bgraedel/arcos4py/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs \u00b6 Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features \u00b6 Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation \u00b6 arcos4py could always use more documentation, whether as part of the official arcos4py docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback \u00b6 The best way to send feedback is to file an issue at https://github.com/bgraedel/arcos4py/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible to make it easier to implement. Remember that this is a volunteer-driven project and that contributions are welcome :) Get Started! \u00b6 Ready to contribute? Here's how to set up arcos4py for local development. Fork the arcos4py repo on GitHub. Clone your fork locally $ git clone git@github.com:your_name_here/arcos4py.git Ensure poetry is installed. Install dependencies and start your virtualenv: $ poetry install -E test -E doc -E dev Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: $ poetry run tox Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines \u00b6 Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.7, 3.8, and 3.9. Check https://github.com/bgraedel/arcos4py/actions and make sure that the tests pass for all supported Python versions. Tips \u00b6 $ poetry run pytest tests/test_arcos4py.py To run a subset of tests. Deploying \u00b6 A reminder for the maintainers on how to deploy: Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run: $ poetry run bump2version patch # possible: major / minor / patch $ git push $ git push --tags GitHub Actions will then deploy to PyPI if tests pass.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/bgraedel/arcos4py/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"arcos4py could always use more documentation, whether as part of the official arcos4py docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/bgraedel/arcos4py/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible to make it easier to implement. Remember that this is a volunteer-driven project and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up arcos4py for local development. Fork the arcos4py repo on GitHub. Clone your fork locally $ git clone git@github.com:your_name_here/arcos4py.git Ensure poetry is installed. Install dependencies and start your virtualenv: $ poetry install -E test -E doc -E dev Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: $ poetry run tox Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.7, 3.8, and 3.9. Check https://github.com/bgraedel/arcos4py/actions and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"contributing/#tips","text":"$ poetry run pytest tests/test_arcos4py.py To run a subset of tests.","title":"Tips"},{"location":"contributing/#deploying","text":"A reminder for the maintainers on how to deploy: Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run: $ poetry run bump2version patch # possible: major / minor / patch $ git push $ git push --tags GitHub Actions will then deploy to PyPI if tests pass.","title":"Deploying"},{"location":"installation/","text":"Installation \u00b6 Stable release \u00b6 To install arcos4py, run this command in your terminal: $ pip install arcos4py This is the preferred method to install arcos4py, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process. From source \u00b6 The source for arcos4py can be downloaded from the Github repo . You can either clone the public repository: $ git clone https://github.com/bgraedel/arcos4py Or download the tarball : $ curl -OJL https://github.com/bgraedel/arcos4py/tarball/master Once you have a copy of the source, you can install it with: $ pip install .","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#stable-release","text":"To install arcos4py, run this command in your terminal: $ pip install arcos4py This is the preferred method to install arcos4py, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process.","title":"Stable release"},{"location":"installation/#from-source","text":"The source for arcos4py can be downloaded from the Github repo . You can either clone the public repository: $ git clone https://github.com/bgraedel/arcos4py Or download the tarball : $ curl -OJL https://github.com/bgraedel/arcos4py/tarball/master Once you have a copy of the source, you can install it with: $ pip install .","title":"From source"},{"location":"usage/","text":"Usage \u00b6 To use arcos4py in a project import arcos4py Basic usage example of the main module \u00b6 To use the main class, generate a new class instance of ARCOS from arcos4py import ARCOS ts = ARCOS(data,[\"x, y\"], 't', 'id', 'm', 'clTrackID') Data has to be a time-series provided as a pandas DataFrame in the long format, containing at least a measurement column, a frame/index column, and an id column. t x y m id Position 0 1 0.228724716134052 -0.158939933368972 0 1 0 1 1 0.880322831777765 -0.117711550077457 0 2 0 2 1 1.93057074895645 0.0786037381335957 0 3 0 3 1 2.95877070488632 0.189801493820322 0 4 0 4 1 3.90293266588805 -0.0413798066471996 0 5 0 .. . ............... ................. . .. . Prepare the input data. \u00b6 interpolate Measurments \u00b6 If the measurement column contains missing values, run interpolate_measurements() first. ts.interpolate_measurements() Clip measurement to provided quantile range \u00b6 Clipping can be performed to remove extreme outliers from the dataset, but it is not necessary. ts.clip_meas(clip_low: = 0.001, clip_high=0.999) Rescale and Binarize the measurement \u00b6 Rescaling and detrending are optional for the algorithm to work but recommended. There are three options available: ['none', 'lm', 'runmed']. Rumned is the default. However, ARCOS requires binarized data to detect and track collective event clusters. Binarization is done by setting a threshold (binThr) and defining measurements below this threshold as 0 and above as 1. ts.bin_measurements(smoothK: int = 1, biasK = 1, peakThr = 1,binThr = 1, polyDeg = 1, biasMet = \"runmed\",) Detect collective events \u00b6 events_df = ts.trackCollev(eps = 1, minClsz = 1, nPrev = 1) print(events_df) t id x y clTrackID m Position 0 2 41 4.15698907764003 3.91461390425413 1 1 0 1 3 32 3.89042167730585 2.98886585399189 1 1 0 2 3 40 3.08624924975602 4.193936843095 1 1 0 3 3 41 3.99750905085216 3.9553900675078 1 1 0 4 3 42 5.06006349489829 4.0631364410516 1 1 0 .. . .. ... .. . . . TrackCollev returns a pandas DataFrame object containing a column with the collecive event id. Perform calculations without main class \u00b6 All functions from the ARCOS class are also accessible individually through the tools module, such as: from arcos4py.tools import trackCollev Additional modules \u00b6 In addition to the ARCOS algorithm and its helper classes, plots are generated with the plotting module, collective event statistics using the stats module. Please see the Modules Page for further details.","title":"Usage"},{"location":"usage/#usage","text":"To use arcos4py in a project import arcos4py","title":"Usage"},{"location":"usage/#basic-usage-example-of-the-main-module","text":"To use the main class, generate a new class instance of ARCOS from arcos4py import ARCOS ts = ARCOS(data,[\"x, y\"], 't', 'id', 'm', 'clTrackID') Data has to be a time-series provided as a pandas DataFrame in the long format, containing at least a measurement column, a frame/index column, and an id column. t x y m id Position 0 1 0.228724716134052 -0.158939933368972 0 1 0 1 1 0.880322831777765 -0.117711550077457 0 2 0 2 1 1.93057074895645 0.0786037381335957 0 3 0 3 1 2.95877070488632 0.189801493820322 0 4 0 4 1 3.90293266588805 -0.0413798066471996 0 5 0 .. . ............... ................. . .. .","title":"Basic usage example of the main module"},{"location":"usage/#prepare-the-input-data","text":"","title":"Prepare the input data."},{"location":"usage/#interpolate-measurments","text":"If the measurement column contains missing values, run interpolate_measurements() first. ts.interpolate_measurements()","title":"interpolate Measurments"},{"location":"usage/#clip-measurement-to-provided-quantile-range","text":"Clipping can be performed to remove extreme outliers from the dataset, but it is not necessary. ts.clip_meas(clip_low: = 0.001, clip_high=0.999)","title":"Clip measurement to provided quantile range"},{"location":"usage/#rescale-and-binarize-the-measurement","text":"Rescaling and detrending are optional for the algorithm to work but recommended. There are three options available: ['none', 'lm', 'runmed']. Rumned is the default. However, ARCOS requires binarized data to detect and track collective event clusters. Binarization is done by setting a threshold (binThr) and defining measurements below this threshold as 0 and above as 1. ts.bin_measurements(smoothK: int = 1, biasK = 1, peakThr = 1,binThr = 1, polyDeg = 1, biasMet = \"runmed\",)","title":"Rescale and Binarize the measurement"},{"location":"usage/#detect-collective-events","text":"events_df = ts.trackCollev(eps = 1, minClsz = 1, nPrev = 1) print(events_df) t id x y clTrackID m Position 0 2 41 4.15698907764003 3.91461390425413 1 1 0 1 3 32 3.89042167730585 2.98886585399189 1 1 0 2 3 40 3.08624924975602 4.193936843095 1 1 0 3 3 41 3.99750905085216 3.9553900675078 1 1 0 4 3 42 5.06006349489829 4.0631364410516 1 1 0 .. . .. ... .. . . . TrackCollev returns a pandas DataFrame object containing a column with the collecive event id.","title":"Detect collective events"},{"location":"usage/#perform-calculations-without-main-class","text":"All functions from the ARCOS class are also accessible individually through the tools module, such as: from arcos4py.tools import trackCollev","title":"Perform calculations without main class"},{"location":"usage/#additional-modules","text":"In addition to the ARCOS algorithm and its helper classes, plots are generated with the plotting module, collective event statistics using the stats module. Please see the Modules Page for further details.","title":"Additional modules"}]}